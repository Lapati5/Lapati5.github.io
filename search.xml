<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java编译</title>
    <url>/2020/08/16/Java01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>本文将简述通过命令行对Java源代码进行编译运行以及打包的过程</center>

<a id="more"></a>

<h2 id="1-程序运行"><a href="#1-程序运行" class="headerlink" title="1. 程序运行"></a>1. 程序运行</h2><p><strong>Step 1：</strong>在文本编辑器vscode中编写乘法表程序</p>
<p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180217.png" alt=""></p>
<figure class="highlight java"><figcaption><span>乘法表</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiTable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"Please input a number: "</span>);</span><br><span class="line">        <span class="keyword">int</span> num = in.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s &lt; i; ++s) &#123;</span><br><span class="line">                System.out.print(<span class="string">"   "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= num; ++j) &#123;</span><br><span class="line">                System.out.printf(<span class="string">"%2d "</span>, i * j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Step 2：</strong>打开cmd</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180133.png" style="zoom:67%;" />

<p><strong>Step3：</strong>进入MultiTable.java所在的目录</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180306.png" style="zoom:67%;" />

<p><strong>Step4:</strong> 输入命令<code>javac MultiTable.java</code>进行编译源代码</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180322.png" style="zoom: 67%;" />

<p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180325.png" alt=""></p>
<p>随后在当前目录下生成MultiTable.class文件</p>
<p><strong>Step5:</strong> 输入命令<code>java MultiTable</code>执行已编译好的.class文件，输入一个数字9，得到9x9乘法表输出：</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180327.png" style="zoom: 67%;" />

<hr>
<h2 id="2-Java编写到执行过程"><a href="#2-Java编写到执行过程" class="headerlink" title="2. Java编写到执行过程"></a>2. Java编写到执行过程</h2><ol>
<li>创建并编写源文件后，对源文件进行编译，生成.class文件</li>
<li>在JVM上运行生成好的.class文件，执行文件内容</li>
</ol>
<hr>
<h2 id="3-困难与思考"><a href="#3-困难与思考" class="headerlink" title="3. 困难与思考"></a>3. 困难与思考</h2><ul>
<li>在文本编译器编写程序时出现了文件名与类名不一致的低级错误(IDE的保姆式服务使人荒废😵)</li>
<li>对代码进行调整后未重新编译便直接运行.class 文件，导致结果与上次相同，还一度以为代码有问题，最后把主要代码都注释掉，发现还是一样的输出，才意识到原来没有编译😑</li>
</ul>
<h2 id="4-Jar格式打包并运行"><a href="#4-Jar格式打包并运行" class="headerlink" title="4. Jar格式打包并运行"></a>4. Jar格式打包并运行</h2><p>在对 MultiTable乘法表这个程序编译和运行之后，可以通过jar命令调用JDK自带的打包工具完成打包。</p>
<ol>
<li><p>准备一个manifest.txt文件，包含</p>
<p><code>Main-Class: MultiTable</code></p>
<blockquote>
<p><strong>MultiTable和冒号之前有空格，MultiTable 后面有换行</strong></p>
<p><strong>MultiTable为包含main方法的类</strong></p>
</blockquote>
</li>
<li><p>执行命令<code>jar -cvmf manifest.txt MultiTable.jar *.class</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180334.png" alt=""></p>
<p>随后在相同目录下生成MultiTable.jar文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180342.png" alt=""></p>
</li>
<li><p>执行命令<code>java -jar MultiTable.jar</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180337.png" alt=""></p>
<p>成功执行代码，显示出9x9乘法表</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术向</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Google C++ 编程规范</title>
    <url>/2020/03/16/Google-C-Style/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>本文参考Google C++风格指南，进行了一些有舍取的摘录，以增强版面的规范与观赏性</center>
<a id="more"></a>

<h2 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1. 头文件"></a>1. 头文件</h2><h3 id="1-1-内联函数"><a href="#1-1-内联函数" class="headerlink" title="1.1 内联函数"></a>1.1 内联函数</h3><p>只有当函数只有 10 行甚至更少时才将其定义为内联函数.</p>
<h3 id="1-2-前置声明"><a href="#1-2-前置声明" class="headerlink" title="1.2 前置声明"></a>1.2 前置声明</h3><p>尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。</p>
<h3 id="1-3-include-的路径及顺序"><a href="#1-3-include-的路径及顺序" class="headerlink" title="1.3 #include 的路径及顺序"></a>1.3 #include 的路径及顺序</h3><p>又如, dir/foo.cc 或 dir/foo_test.cc 的主要作用是实现或测试 dir2/foo2.h 的功能, foo.cc 中包含头文件的次序如下:</p>
<ol>
<li>dir2/foo2.h (优先位置)</li>
<li>C 系统文件</li>
<li>C++ 系统文件</li>
<li>其他库的 .h 文件</li>
<li>本项目内 .h 文件</li>
</ol>
<h2 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2. 作用域"></a>2. 作用域</h2><h3 id="2-1-非成员函数、静态成员函数和全局函数"><a href="#2-1-非成员函数、静态成员函数和全局函数" class="headerlink" title="2.1 非成员函数、静态成员函数和全局函数"></a>2.1 非成员函数、静态成员函数和全局函数</h3><p>使用静态成员函数或命名空间内的非成员函数, 尽量不要用裸的全局函数. 将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关.</p>
<h3 id="2-2-局部变量"><a href="#2-2-局部变量" class="headerlink" title="2.2 局部变量"></a>2.2 局部变量</h3><p>将函数变量尽可能置于最小作用域内, 并在变量声明时进行初始化.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">i = f(); <span class="comment">// 坏——初始化和声明分离</span></span><br><span class="line"><span class="keyword">int</span> j = g(); <span class="comment">// 好——初始化时声明</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">1</span>); <span class="comment">// 用花括号初始化更好</span></span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// 好——v 一开始就初始化</span></span><br></pre></td></tr></table></figure>

<p>属于 if, while 和 for 语句的变量应当在这些语句中正常地声明，这样子这些变量的作用域就被限制在这些语句中了.<br><code>while (const char* p = strchr(str, &#39;/&#39;)) str = p + 1;</code><br>有一个例外, 如果变量是一个对象, 每次进入作用域都要调用其构造函数, 每次退出作用域都要调用其析构函数. 这会导致效率降低.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 低效的实现</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">    Foo f;                  <span class="comment">// 构造函数和析构函数分别调用 1000000 次!</span></span><br><span class="line">    f.DoSomething(i);</span><br><span class="line">&#125;</span><br><span class="line">Foo f;                      <span class="comment">// 构造函数和析构函数只调用 1 次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">    f.DoSomething(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h2><h3 id="3-1-参数顺序"><a href="#3-1-参数顺序" class="headerlink" title="3.1 参数顺序"></a>3.1 参数顺序</h3><p>函数的参数顺序为: 输入参数在先, 后跟输出参数.</p>
<h3 id="3-2-引用参数"><a href="#3-2-引用参数" class="headerlink" title="3.2 引用参数"></a>3.2 引用参数</h3><p>所有按引用传递的参数必须加上 const.<br><code>void Foo(const string &amp;in, string *out);</code><br>输入参数是值参或 const 引用, 输出参数为指针. 输入参数可以是 const 指针, 但决不能是非 const 的引用参数, 除非特殊要求, 比如 swap().</p>
<h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><p>你可以编写一个参数类型为 const string&amp; 的函数, 然后用另一个参数类型为 const char* 的函数对其进行重载:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Analyze</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="built_in">text</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Analyze</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">text</span>, <span class="keyword">size_t</span> textlen)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-缺省参数"><a href="#3-4-缺省参数" class="headerlink" title="3.4 缺省参数"></a>3.4 缺省参数</h3><p>只允许在非虚函数中使用缺省参数, 且必须保证缺省参数的值始终一致. 缺省参数与函数重载遵循同样的规则. 一般情况下建议使用函数重载, 尤其是在缺省函数带来的可读性提升不能弥补下文中所提到的缺点的情况下.</p>
<h2 id="4-命名约定"><a href="#4-命名约定" class="headerlink" title="4. 命名约定"></a>4. 命名约定</h2><h3 id="4-1-通用命名规则"><a href="#4-1-通用命名规则" class="headerlink" title="4.1 通用命名规则"></a>4.1 通用命名规则</h3><p>函数命名, 变量命名, 文件命名要有描述性; 少用缩写.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> price_count_reader;    <span class="comment">// 无缩写</span></span><br><span class="line"><span class="keyword">int</span> num_errors;            <span class="comment">// "num" 是一个常见的写法</span></span><br><span class="line"><span class="keyword">int</span> num_dns_connections;   <span class="comment">// 人人都知道 "DNS" 是什么</span></span><br><span class="line"><span class="keyword">int</span> n;                     <span class="comment">// 毫无意义.</span></span><br><span class="line"><span class="keyword">int</span> nerr;                  <span class="comment">// 含糊不清的缩写.</span></span><br><span class="line"><span class="keyword">int</span> n_comp_conns;          <span class="comment">// 含糊不清的缩写.</span></span><br><span class="line"><span class="keyword">int</span> wgc_connections;       <span class="comment">// 只有贵团队知道是什么意思.</span></span><br><span class="line"><span class="keyword">int</span> pc_reader;             <span class="comment">// "pc" 有太多可能的解释了.</span></span><br><span class="line"><span class="keyword">int</span> cstmr_id;              <span class="comment">// 删减了若干字母.</span></span><br></pre></td></tr></table></figure>

<p>注意, 一些特定的广为人知的缩写是允许的, 例如用 i 表示迭代变量和用 T 表示模板参数.</p>
<h3 id="4-2-文件命名"><a href="#4-2-文件命名" class="headerlink" title="4.2 文件命名"></a>4.2 文件命名</h3><p>文件名要全部小写, 可以包含下划线 (_) 或连字符 (-), 依照项目的约定. 如果没有约定, 那么 “_” 更好.</p>
<h3 id="4-3-类型命名"><a href="#4-3-类型命名" class="headerlink" title="4.3 类型命名"></a>4.3 类型命名</h3><p>类型名称的每个单词首字母均大写, 不包含下划线: MyExcitingClass, MyExcitingEnum.</p>
<h3 id="4-4-变量命名"><a href="#4-4-变量命名" class="headerlink" title="4.4 变量命名"></a>4.4 变量命名</h3><p>变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量以下划线结尾, 但结构体的就不用, 如: a_local_variable, a_struct_data_member, a_class_data_member_.</p>
<figure class="highlight c++"><figcaption><span>普通变量命名</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> table_name;  <span class="comment">// 好 - 用下划线.</span></span><br><span class="line"><span class="built_in">string</span> tablename;   <span class="comment">// 好 - 全小写.</span></span><br><span class="line"><span class="built_in">string</span> tableName;  <span class="comment">// 差 - 混合大小写</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><figcaption><span>类数据成员</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableInfo</span> &#123;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">string</span> table_name_;  <span class="comment">// 好 - 后加下划线.</span></span><br><span class="line">  <span class="built_in">string</span> tablename_;   <span class="comment">// 好.</span></span><br><span class="line">  <span class="keyword">static</span> Pool&lt;TableInfo&gt;* pool_;  <span class="comment">// 好.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><figcaption><span>结构体变量</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UrlTableProperties</span> &#123;</span></span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">  <span class="keyword">int</span> num_entries;</span><br><span class="line">  <span class="keyword">static</span> Pool&lt;UrlTableProperties&gt;* pool;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-常量命名"><a href="#4-5-常量命名" class="headerlink" title="4.5 常量命名"></a>4.5 常量命名</h3><p>声明为 constexpr 或 const 的变量, 或在程序运行期间其值始终保持不变的, 命名时以 “k” 开头, 大小写混合. 例如:<code>const int kDaysInAWeek = 7;</code></p>
<h3 id="4-6-函数命名"><a href="#4-6-函数命名" class="headerlink" title="4.6 函数命名"></a>4.6 函数命名</h3><p>常规函数使用大小写混合, 取值和设值函数则要求与变量名匹配: MyExcitingFunction(), MyExcitingMethod(), my_exciting_member_variable(), set_my_exciting_member_variable().<br>一般来说, 函数名的每个单词首字母大写 (即 <span class="label info">“驼峰变量名”</span> 或 <span class="label danger">“帕斯卡变量名”</span>), 没有下划线. 对于首字母缩写的单词, 更倾向于将它们视作一个单词进行首字母大写</p>
<h2 id="5-格式"><a href="#5-格式" class="headerlink" title="5. 格式"></a>5. 格式</h2><h3 id="5-1-行长度"><a href="#5-1-行长度" class="headerlink" title="5.1 行长度"></a>5.1 行长度</h3><ul>
<li>80 个字符是最大值.</li>
<li>如果无法在不伤害易读性的条件下进行断行, 那么注释行可以超过 80 个字符, 这样可以方便复制粘贴. 例如, 带有命令示例或 URL 的行可以超过 80 个字符.</li>
<li>包含长路径的 #include 语句可以超出80列.</li>
<li>头文件保护 可以无视该原则.</li>
</ul>
<h3 id="5-2-函数声明与定义"><a href="#5-2-函数声明与定义" class="headerlink" title="5.2 函数声明与定义"></a>5.2 函数声明与定义</h3><figure class="highlight c++"><figcaption><span>三种情况</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function">ReturnType <span class="title">ClassName::FunctionName</span><span class="params">(Type par_name1, Type par_name2)</span> </span>&#123;</span><br><span class="line">  DoSomething();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ReturnType <span class="title">ClassName::ReallyLongFunctionName</span><span class="params">(Type par_name1, Type par_name2,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             Type par_name3)</span> </span>&#123;</span><br><span class="line">  DoSomething();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ReturnType <span class="title">LongClassName::ReallyReallyReallyLongFunctionName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Type par_name1,  <span class="comment">// 4 space indent</span></span></span></span><br><span class="line"><span class="function"><span class="params">    Type par_name2,</span></span></span><br><span class="line"><span class="function"><span class="params">    Type par_name3)</span> </span>&#123;</span><br><span class="line">  DoSomething();  <span class="comment">// 2 space indent</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>使用好的参数名.</li>
<li>只有在参数未被使用或者其用途非常明显时, 才能省略参数名.</li>
<li>如果返回类型和函数名在一行放不下, 分行.</li>
<li>如果返回类型与函数声明或定义分行了, 不要缩进.</li>
<li>左圆括号总是和函数名在同一行.</li>
<li>函数名和左圆括号间永远没有空格.</li>
<li>圆括号与参数间没有空格.</li>
<li>左大括号总在最后一个参数同一行的末尾处, 不另起新行.</li>
<li>右大括号总是单独位于函数最后一行, 或者与左大括号同一行.</li>
<li>右圆括号和左大括号间总是有一个空格.</li>
<li>所有形参应尽可能对齐.</li>
<li>缺省缩进为 2 个空格.</li>
<li>换行后的参数保持 4 个空格的缩进.</li>
</ul>
<h3 id="5-3-函数调用"><a href="#5-3-函数调用" class="headerlink" title="5.3 函数调用"></a>5.3 函数调用</h3><p>要么一行写完函数调用, 要么在圆括号里对参数分行, 要么参数另起一行且缩进四格. 如果没有其它顾虑的话, 尽可能精简行数, 比如把多个参数适当地放在同一行里.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> retval = DoSomething(argument1, argument2, argument3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> retval = DoSomething(averyveryveryverylongargument1,</span><br><span class="line">                          argument2, argument3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (...) &#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (...) &#123;</span><br><span class="line">    DoSomething(</span><br><span class="line">        argument1, argument2,  <span class="comment">// 4 空格缩进</span></span><br><span class="line">        argument3, argument4);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-条件语句"><a href="#5-4-条件语句" class="headerlink" title="5.4 条件语句"></a>5.4 条件语句</h3><p>注意所有情况下 if 和左圆括号间都有个空格. 右圆括号和左大括号之间也要有个空格:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)     <span class="comment">// 差 - IF 后面没空格.</span></span><br><span class="line"><span class="keyword">if</span> (condition)&#123;   <span class="comment">// 差 - &#123; 前面没空格.</span></span><br><span class="line"><span class="keyword">if</span>(condition)&#123;    <span class="comment">// 变本加厉地差.</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;  <span class="comment">// 好 - IF 和 &#123; 都与空格紧邻.</span></span><br></pre></td></tr></table></figure>

<p>如果能增强可读性, 简短的条件语句允许写在同一行. 只有当语句简单并且没有使用 else 子句时使用:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x == kFoo) <span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">if</span> (x == kBar) <span class="keyword">return</span> <span class="keyword">new</span> Bar();</span><br></pre></td></tr></table></figure>

<p>如果语句有 else 分支则不允许:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不允许 - 当有 ELSE 分支时 IF 块却写在同一行</span></span><br><span class="line"><span class="keyword">if</span> (x) DoThis();</span><br><span class="line"><span class="keyword">else</span> DoThat();</span><br></pre></td></tr></table></figure>

<p>但如果语句中某个 if-else 分支使用了大括号的话, 其它分支也必须使用:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要其中一个分支用了大括号, 两个分支都要用上大括号.</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  foo;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-循环和switch语句"><a href="#5-5-循环和switch语句" class="headerlink" title="5.5 循环和switch语句"></a>5.5 循环和switch语句</h3><p>如果有不满足 case 条件的枚举值, switch 应该总是包含一个 default 匹配 (如果有输入值没有 case 去处理, 编译器将给出 warning). 如果 default 应该永远执行不到, 简单的加条 assert:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (var) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>: &#123;  <span class="comment">// 2 空格缩进</span></span><br><span class="line">    ...      <span class="comment">// 4 空格缩进</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">    assert(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在单语句循环里, 括号可用可不用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kSomeNumber; ++i)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I love you\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kSomeNumber; ++i) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I take it back\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>空循环体应使用 {} 或 continue, 而不是一个简单的分号.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">  <span class="comment">// 反复循环直到条件失效.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kSomeNumber; ++i) &#123;&#125;  <span class="comment">// 可 - 空循环体.</span></span><br><span class="line"><span class="keyword">while</span> (condition) <span class="keyword">continue</span>;  <span class="comment">// 可 - contunue 表明没有逻辑.</span></span><br><span class="line"><span class="keyword">while</span> (condition);  <span class="comment">// 差 - 看起来仅仅只是 while/loop 的部分之一.</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6-指针与引用表达式"><a href="#5-6-指针与引用表达式" class="headerlink" title="5.6 指针与引用表达式"></a>5.6 指针与引用表达式</h3><figure class="highlight c++"><figcaption><span>正确使用范例</span></figcaption><table><tr><td class="code"><pre><span class="line">x = *p;</span><br><span class="line">p = &amp;x;</span><br><span class="line">x = r.y;</span><br><span class="line">x = r-&gt;y;</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>在访问成员时, 句点或箭头前后没有空格.</li>
<li>指针操作符 * 或 &amp; 后没有空格.</li>
</ul>
<p>在声明指针变量或参数时, 星号与类型或变量名紧挨都可以:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 好, 空格前置.</span></span><br><span class="line"><span class="keyword">char</span> *c;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> &amp;str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好, 空格后置.</span></span><br><span class="line"><span class="keyword">char</span>* c;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span>&amp; str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, *y;  <span class="comment">// 不允许 - 在多重声明中不能使用 &amp; 或 *</span></span><br><span class="line"><span class="keyword">char</span> * c;  <span class="comment">// 差 - * 两边都有空格</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> &amp; str;  <span class="comment">// 差 - &amp; 两边都有空格.</span></span><br></pre></td></tr></table></figure>

<h3 id="5-7-布尔表达式"><a href="#5-7-布尔表达式" class="headerlink" title="5.7 布尔表达式"></a>5.7 布尔表达式</h3><p>如果一个布尔表达式超过 标准行宽, 断行方式要统一一下.</p>
<figure class="highlight c++"><figcaption><span>逻辑与 (&&) 操作符总位于行尾</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (this_one_thing &gt; this_other_thing &amp;&amp;</span><br><span class="line">    a_third_thing == a_fourth_thing &amp;&amp;</span><br><span class="line">    yet_another &amp;&amp; last_one) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-8-类格式"><a href="#5-8-类格式" class="headerlink" title="5.8 类格式"></a>5.8 类格式</h3><p>类声明 (下面的代码中缺少注释, 参考 类注释) 的基本格式如下:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> :</span> <span class="keyword">public</span> OtherClass &#123;</span><br><span class="line"> <span class="keyword">public</span>:      <span class="comment">// 注意有一个空格的缩进</span></span><br><span class="line">  MyClass();  <span class="comment">// 标准的两空格缩进</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">MyClass</span><span class="params">(<span class="keyword">int</span> var)</span></span>;</span><br><span class="line">  ~MyClass() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SomeFunction</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SomeFunctionThatDoesNothing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_some_var</span><span class="params">(<span class="keyword">int</span> var)</span> </span>&#123; some_var_ = var; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">some_var</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> some_var_; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">SomeInternalFunction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> some_var_;</span><br><span class="line">  <span class="keyword">int</span> some_other_var_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>所有基类名应在 80 列限制下尽量与子类名放在同一行.</li>
<li>关键词 public:, protected:, private: 要缩进 1 个空格.</li>
<li>除第一个关键词 (一般是 public) 外, 其他关键词前要空一行. 如果类比较小的话也可以不空.</li>
<li>这些关键词后不要保留空行.</li>
<li>public 放在最前面, 然后是 protected, 最后是 private.</li>
<li>关于声明顺序的规则请参考 声明顺序 一节.</li>
</ul>
<h3 id="5-9-水平留白"><a href="#5-9-水平留白" class="headerlink" title="5.9 水平留白"></a>5.9 水平留白</h3><p>水平留白的使用根据在代码中的位置决定. 永远不要在行尾添加没意义的留白.</p>
<figure class="highlight c++"><figcaption><span>通用</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123;  <span class="comment">// 左大括号前总是有空格.</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">// 分号前不加空格.</span></span><br><span class="line"><span class="comment">// 列表初始化中大括号内的空格是可选的.</span></span><br><span class="line"><span class="comment">// 如果加了空格, 那么两边都要加上.</span></span><br><span class="line"><span class="keyword">int</span> x[] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> x[] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承与初始化列表中的冒号前后恒有空格.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> :</span> <span class="keyword">public</span> Bar &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 对于单行函数的实现, 在大括号内加上空格</span></span><br><span class="line">  <span class="comment">// 然后是函数实现</span></span><br><span class="line">  Foo(<span class="keyword">int</span> b) : Bar(), baz_(b) &#123;&#125;  <span class="comment">// 大括号里面是空的话, 不加空格.</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">()</span> </span>&#123; baz_ = <span class="number">0</span>; &#125;  <span class="comment">// 用括号把大括号与实现分开.</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><figcaption><span>循环和条件语句</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (b) &#123;          <span class="comment">// if 条件语句和循环语句关键字后均有空格.</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;          <span class="comment">// else 前后有空格.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (test) &#123;&#125;   <span class="comment">// 圆括号内部不紧邻空格.</span></span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">switch</span> ( i ) &#123;    <span class="comment">// 循环和条件语句的圆括号里可以与空格紧邻.</span></span><br><span class="line"><span class="keyword">if</span> ( test ) &#123;     <span class="comment">// 圆括号, 但这很少见. 总之要一致.</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i ) &#123;</span><br><span class="line"><span class="keyword">for</span> ( ; i &lt; <span class="number">5</span> ; ++i) &#123;  <span class="comment">// 循环里内 ; 后恒有空格, ;  前可以加个空格.</span></span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:         <span class="comment">// switch case 的冒号前无空格.</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">break</span>;  <span class="comment">// 如果冒号有代码, 加个空格.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><figcaption><span>操作符</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 赋值运算符前后总是有空格.</span></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它二元操作符也前后恒有空格, 不过对于表达式的子式可以不加空格.</span></span><br><span class="line"><span class="comment">// 圆括号内部没有紧邻空格.</span></span><br><span class="line">v = w * x + y / z;</span><br><span class="line">v = w*x + y/z;</span><br><span class="line">v = w * (x + z);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在参数和一元操作符之间不加空格.</span></span><br><span class="line">x = <span class="number">-5</span>;</span><br><span class="line">++x;</span><br><span class="line"><span class="keyword">if</span> (x &amp;&amp; !y)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><figcaption><span>模板和转换</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尖括号(&lt; and &gt;) 不与空格紧邻, &lt; 前没有空格, &gt; 和 ( 之间也没有.</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; x;</span><br><span class="line">y = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在类型与指针操作符之间留空格也可以, 但要保持一致.</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span> *&gt; x;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>技术向</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC编程</title>
    <url>/2020/09/12/JDBC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>本文将介绍JDBC编程，实现Java与数据库的交互连接</center>

<a id="more"></a>

<h2 id="1-代码编写"><a href="#1-代码编写" class="headerlink" title="1. 代码编写"></a>1. 代码编写</h2><blockquote>
<p>注：以下均只给出了部分代码，完整代码请见文末Github链接</p>
</blockquote>
<h3 id="1-1-创建数据库"><a href="#1-1-创建数据库" class="headerlink" title="1.1 创建数据库"></a>1.1 创建数据库</h3><p>数据库中创建学生信息(studentinfo)表单，以学生id(stu_id)为主键，加入姓名(stu_name)，班级(stu_class)的列</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180522.png" style="zoom:67%;" />

<p>往该表中增加一些信息，最终效果如下：</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180529.png" style="zoom:67%;" />

<h3 id="1-2-创建JDBC项目"><a href="#1-2-创建JDBC项目" class="headerlink" title="1.2 创建JDBC项目"></a>1.2 创建JDBC项目</h3><p>创建Java项目JDBC_Study，并在其下新建包，包中创建JDBCDemo.java</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180537.png" style="zoom:67%;" />

<p>同时，在<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">MySQL官网</a>下载mysql的JDBC驱动jar包，并将其解压：</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/jdbc02.png" style="zoom:67%;" />

<p>在IDEA中，为JDBC_Study项目导入该jar包：</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180544.png" style="zoom:67%;" />

<p>从而在项目的External Libraries中添加得到</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180556.png" style="zoom:67%;" />

<h3 id="1-3-建立JDBC连接"><a href="#1-3-建立JDBC连接" class="headerlink" title="1.3 建立JDBC连接"></a>1.3 建立JDBC连接</h3><ul>
<li><p>通过<code>import java.sql.*</code> 导入JDBC包</p>
</li>
<li><p>注册JDBC驱动程序<code>Class.forName()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册JDBC驱动器</span></span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="comment">//driver为JDBC驱动程序名称</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库URL配置</p>
<table>
<thead>
<tr>
<th align="center">DBMS</th>
<th align="center">JDBC驱动程序名称</th>
<th align="center">URL格式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MySQL</td>
<td align="center">com.mysql.cj.jdbc.Driver</td>
<td align="center">jdbc:mysql://hostname/databaseName</td>
</tr>
</tbody></table>
</li>
<li><p>创建连接对象<code>DriverManager.getConnection(String url, String user, String password)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建连接对象,建立连接</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">conn = DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4-实现对数据库访问"><a href="#1-4-实现对数据库访问" class="headerlink" title="1.4 实现对数据库访问"></a>1.4 实现对数据库访问</h3><p><strong>通过Statement接口实现对连接数据库的访问</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数据库进行访问</span></span><br><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">statement = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,</span><br><span class="line">                                        ResultSet.CONCUR_UPDATABLE);</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<p>并通过<code>conn.setAutoCommit(false)</code>取消自动提交，==对于增删改操作需要处理事务==</p>
<p>对数据库进行<strong>增删改</strong>的操作，并将sql操作通过<code>addBatch()</code>添加到批处理中，最后使用<code>executeBatch()</code>方法执行所有sql语句(注：也可以直接使用<code>executeUpdate()</code>直接执行一条sql指令)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql;</span><br><span class="line"><span class="comment">//对数据库中表实施插入操作</span></span><br><span class="line">System.out.println(<span class="string">"Inserting the records into the studentinfo..."</span>);</span><br><span class="line">sql = <span class="string">"INSERT INTO studentinfo "</span> +</span><br><span class="line">            <span class="string">"VALUES (10004, 'george clooney', 'Class04')"</span>;</span><br><span class="line">stmt.addBatch(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对数据库中表实施删除操作</span></span><br><span class="line">System.out.println(<span class="string">"Deleting the records from the studentinfo..."</span>);</span><br><span class="line">sql = <span class="string">"DELETE FROM studentinfo "</span> +</span><br><span class="line">        <span class="string">"WHERE stu_id = 10002"</span>;</span><br><span class="line">stmt.addBatch(sql);        <span class="comment">//将sql语句添加到批处理中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对数据库中表实施更新操作</span></span><br><span class="line">System.out.println(<span class="string">"Updating the records in the studentinfo..."</span>);</span><br><span class="line">sql = <span class="string">"UPDATE studentinfo "</span> +</span><br><span class="line">        <span class="string">"SET stu_class = 'Class04'"</span> +</span><br><span class="line">        <span class="string">"WHERE stu_id = 10004"</span>;</span><br><span class="line">stmt.addBatch(sql);</span><br><span class="line"></span><br><span class="line">stmt.executeBatch();	<span class="comment">//执行批处理中所有sql语句</span></span><br><span class="line">	</span><br><span class="line">stmt.commit();			<span class="comment">//提交改动</span></span><br></pre></td></tr></table></figure>

<p>之后通过<code>commit()</code>对数据库内容改动进行提交</p>
<p>对sql数据库实施<strong>查询</strong>操作，通过<code>executeQuery()</code>获得查询语句返回的结果集，并依次进行访问，其会输出studentinfo表中所有的行的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数据库中表实施查询操作</span></span><br><span class="line">sql = <span class="string">"SELECT stu_id, stu_name, stu_class "</span> +</span><br><span class="line">        <span class="string">"FROM studentinfo"</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line">rs.beforeFirst();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="keyword">int</span> id = rs.getInt(<span class="string">"stu_id"</span>);</span><br><span class="line">    String name = rs.getString(<span class="string">"stu_name"</span>);</span><br><span class="line">    String classname = rs.getString(<span class="string">"stu_class"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">"ID: "</span> + id);</span><br><span class="line">    System.out.print(<span class="string">", Name: "</span> + name);</span><br><span class="line">    System.out.println(<span class="string">", Class: "</span> + classname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后再通过<code>close()</code>对结果集，访问接口，驱动器连接进行关闭</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>

<p>整段代码执行结果如下</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180611.png" style="zoom:67%;" />

<p>最后在数据库中进行查看更改已经完成</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180614.png" style="zoom:67%;" />

<p><strong>通过PrepareStatement接口实现对数据库的访问</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数据库进行访问</span></span><br><span class="line">PrepareStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="string">""</span>INSERT INTO studentinfo <span class="string">" +</span></span><br><span class="line"><span class="string">            	"</span>VALUES (?,  ?,  ?)<span class="string">";</span></span><br><span class="line"><span class="string">pstmt = conn.prepareStatement(sql);</span></span><br></pre></td></tr></table></figure>

<p>pstmt通过调用<code>setXXX()</code>方法将值绑定到<code>?</code>参数上，下标从1开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定未知参数</span></span><br><span class="line">pstmt.setInt(<span class="number">1</span>, <span class="number">10003</span>);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, <span class="string">"Mary Jane"</span>);</span><br><span class="line">pstmt.setString(<span class="number">3</span>,<span class="string">" Class02"</span>);</span><br><span class="line"></span><br><span class="line">pstmt.executeUpdate();</span><br><span class="line">conn.commit();</span><br></pre></td></tr></table></figure>

<p>于此同时，PrepareStatement接口也拥有Statement接口的executeUpdate()，addBatch()等方法，使用几乎一样，只是没有sql语句作为参数。</p>
<p>最后通过<code>pstmt.close()</code>关闭pstms</p>
<h3 id="1-5-代码测试"><a href="#1-5-代码测试" class="headerlink" title="1.5 代码测试"></a>1.5 代码测试</h3><blockquote>
<p>以下均为部分代码，完整代码请见文末Github链接</p>
</blockquote>
<p>构建一个学生类(Student)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String classname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, String classname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.classname = classname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"ID: "</span> + id +</span><br><span class="line">                <span class="string">"\t姓名: "</span> + name +</span><br><span class="line">                <span class="string">"\t班级: "</span> + classname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 一堆getter和setter */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构建一个测试类(StuTest)，通过与用户的交互，向用户提示操作信息，通过接口，完成学生数据库的增删改查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">private</span> Connection conn = <span class="keyword">null</span>;				  <span class="comment">//与数据库的连接</span></span><br><span class="line">    <span class="keyword">private</span> PreparedStatement pstmt = <span class="keyword">null</span>;       <span class="comment">//对数据库进行访问的接口</span></span><br><span class="line">    <span class="keyword">private</span> String sql = <span class="keyword">null</span>;                    <span class="comment">//数据库sql语句</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StuTest t1 = <span class="keyword">new</span> StuTest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.MainMenu();                      <span class="comment">//运行主界面</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主界面函数，显示可用操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MainMenu</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        conn = Connector.getConnection();              <span class="comment">//获得与JDBC驱动程序的连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> op = in.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span> -&gt; Check();      <span class="comment">//查询操作</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span> -&gt; Change();     <span class="comment">//修改操作</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span> -&gt; Show();       <span class="comment">//显示操作</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span> -&gt; &#123;</span><br><span class="line">                    Connector.closeConnection(conn);        <span class="comment">//关闭连接</span></span><br><span class="line">                    System.exit(<span class="number">0</span>);              <span class="comment">//退出程序</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印rs指向的结果集的行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printRs</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过学生id查询数据库内学生情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Check</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供可用的修改操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> op = in.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                Student stu = addStudent();         <span class="comment">//新增一名学生</span></span><br><span class="line">                Insert(stu);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; Update();                     <span class="comment">//更新一名学生的信息</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> -&gt; Delete();                     <span class="comment">//删除一名学生</span></span><br><span class="line">        &#125;</span><br><span class="line">        pstmt.close();                              <span class="comment">//操作结束后关闭接口</span></span><br><span class="line">        conn.commit();                    <span class="comment">//提交修改至数据库</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数据库中所有学生的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====所有学生信息===="</span>);</span><br><span class="line">        sql = <span class="string">"SELECT stu_id, stu_name, stu_class FROM studentinfo"</span>;</span><br><span class="line">        pstmt = conn.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,</span><br><span class="line">                ResultSet.CONCUR_UPDATABLE);</span><br><span class="line">        ResultSet rs = pstmt.executeQuery();</span><br><span class="line">        rs.beforeFirst();</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            printRs(rs);</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加新的学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">addStudent</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将学生信息插入到数据库中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Student stu)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = stu.getId();</span><br><span class="line">        String name = stu.getName();</span><br><span class="line">        String classname = stu.getClassname();</span><br><span class="line">        sql = <span class="string">"INSERT INTO studentinfo "</span> +</span><br><span class="line">                <span class="string">"VALUES (?, ?, ?)"</span>;</span><br><span class="line">        pstmt = conn.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,</span><br><span class="line">                ResultSet.CONCUR_UPDATABLE);</span><br><span class="line">        pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">        pstmt.setString(<span class="number">2</span>, name);</span><br><span class="line">        pstmt.setString(<span class="number">3</span>, classname);</span><br><span class="line">        pstmt.executeUpdate();</span><br><span class="line">        System.out.println(<span class="string">"=====新增成功===="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在数据库中更新学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在数据库中删除学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时构建Connector类，通过该类完成与数据库的连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Connector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String driver;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String url;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String user;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注册JDBC驱动器</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//创建连接对象,建立连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">//取消自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> conn</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">  		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//关闭访问与连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果大致如下（只演示了部分功能）</p>
<ul>
<li>查询所有学生信息</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180623.png" style="zoom:67%;" />

<ul>
<li>查询某个学生信息</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180625.png" style="zoom:67%;" />

<ul>
<li>增加一条学生信息</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180631.png" style="zoom:67%;" />



<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180640.png" style="zoom:67%;" />



<h2 id="2-题后思考"><a href="#2-题后思考" class="headerlink" title="2.  题后思考"></a>2.  题后思考</h2><ul>
<li><p><strong>JDBC架构</strong></p>
<p> JDBC是通过Java语言访问数据库的一套API，其为Java应用程序与数据库之间的交互提供了桥梁，更加便利。可以通过使用JDBC接口，注册一个JDBC驱动，使用该驱动完成与各种不同种类的数据库的连接，间接执行SQL语句，完成对数据库的访问以及更改</p>
</li>
<li><p><strong>异常处理</strong></p>
<p>出现异常，是一种程序中的常见现象，但如果不对异常进行及时的处理很可能导致程序的终止，在出现异常之后的任务也无法运行了。因此异常处理就是在异常被底层处理而被迫终止程序之前，将其拦截，自己单独处理掉。这样不仅可以更清晰的捕获异常出现的位置，也将其与正常运行的代码分离开来，提高程序的美观性，健壮性。</p>
<p>在Java异常处理机制中，提供<strong>try</strong>（用于监听），<strong>catch</strong>（用于异常捕获），<strong>finally</strong>（主要用于资源回收），<strong>throw</strong>（抛出异常），<strong>throws</strong>（声明方法可能抛出异常）</p>
<p>同时Java中的异常大致可分为<strong>Unchecked Exception</strong>(包括RuntimeException, Error及二者子类) &amp; <strong>Checked Exception</strong>(其余的异常)两类 ，其中Checked Exception是一般直接或间接由于资源问题引起的，必须要被捕获或声明，而RuntimeException一般是你程序本身有问题，Error是系统层面错误，一般不需要捕获或声明</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/ex00.png" style="zoom:50%;" />




</li>
</ul>
<hr>
<h2 id="3-拓展"><a href="#3-拓展" class="headerlink" title="3. 拓展"></a>3. 拓展</h2><p>用<strong>XML文档</strong>方式来试着处理上述问题</p>
<ol>
<li><p>在网上下载XML文档解析的jar包（dom4j.jar）</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/xml00.png" style="zoom:67%;" />

<p>并如同上文方法，导入项目中</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/xml01.png" style="zoom:67%;" />
</li>
<li><p>构建Xml2DB类，完成Xml与数据库的交互</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Xml2DB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sql = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = Connector.getConnection();</span><br><span class="line">            <span class="comment">/* 操作 */</span></span><br><span class="line">            System.out.println(<span class="string">"选择操作：1.增加信息\t2.删除信息\t3.更改信息\t4.查询信息"</span>);</span><br><span class="line">            <span class="keyword">int</span> op = in.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span> -&gt; Insert();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span> -&gt; Delete();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span> -&gt; Update();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span> -&gt; Select();</span><br><span class="line">            &#125;</span><br><span class="line">            conn.commit();</span><br><span class="line">            Connector.closeConnection(conn);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析XML</span></span><br><span class="line"><span class="comment">     * SAXReader可以通过多种方式读取xml数据，并返回Document格式的对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> document对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDocument</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Document doc = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建解析器</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            doc = reader.read(<span class="keyword">new</span> File(<span class="string">"===XML文档路径==="</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取XML文档中的学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 在XML文档中学生类的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Document doc = getDocument();</span><br><span class="line">        Element root = doc.getRootElement();</span><br><span class="line"></span><br><span class="line">        List&lt;Element&gt; student = root.elements(<span class="string">"student"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element e : student) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = Integer.parseInt(e.elementText(<span class="string">"id"</span>).trim());</span><br><span class="line">            String name = e.elementText(<span class="string">"name"</span>).trim();</span><br><span class="line">            String classname = e.elementText(<span class="string">"classname"</span>).trim();</span><br><span class="line">            stuList.add(<span class="keyword">new</span> Student(id, name, classname));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stuList;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//查询操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Select</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建XML文档（以下为部分示例）</p>
<p><strong>Example 1：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">studentinfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span> 10001 <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> bruce lee  <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classname</span>&gt;</span> Class01  <span class="tag">&lt;/<span class="name">classname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span> 10002 <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> peter parker <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classname</span>&gt;</span> Class03 <span class="tag">&lt;/<span class="name">classname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">studentinfo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行SELECT()方法效果如下：</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/xml02.png" style="zoom:67%;" />

<p><strong>Example 2：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">studentinfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span> 10006 <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> jack ma <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classname</span>&gt;</span> Class01  <span class="tag">&lt;/<span class="name">classname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span> 10007 <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> stephen curry <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classname</span>&gt;</span> Class03 <span class="tag">&lt;/<span class="name">classname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">studentinfo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行Insert()方法效果如下</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/xml03.png" style="zoom:67%;" />



</li>
</ol>
   <img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/xml04.png" style="zoom:67%;" />

<hr>
<blockquote>
<p>项目源代码链接：<a href="https://github.com/Lapati5/Java-Project" target="_blank" rel="noopener">https://github.com/Lapati5/Java-Project</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术向</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2020/09/23/MySQL01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>本文将介绍一些关于数据库的基本知识，以及MySQL的基本用法</center>

<a id="more"></a>

<h2 id="1-数据库简介"><a href="#1-数据库简介" class="headerlink" title="1. 数据库简介"></a>1. 数据库简介</h2><h3 id="1-1-数据库基础"><a href="#1-1-数据库基础" class="headerlink" title="1.1 数据库基础"></a>1.1 数据库基础</h3><table>
<thead>
<tr>
<th align="center">基本概念</th>
<th align="center">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数据库（database）</td>
<td align="center">保存有组织的数据的容器</td>
</tr>
<tr>
<td align="center">表（table）</td>
<td align="center">某种特定类型数据的结构化清单</td>
</tr>
<tr>
<td align="center">列（column）</td>
<td align="center">表中的一个字段，所有表都是由一个或者多个列组成的</td>
</tr>
<tr>
<td align="center">数据类型（datatype）</td>
<td align="center">每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据</td>
</tr>
<tr>
<td align="center">行（row）</td>
<td align="center">表中的一个记录</td>
</tr>
<tr>
<td align="center">主键（primary key）</td>
<td align="center">一列（或一组列）其值能唯一区别表中每一行</td>
</tr>
</tbody></table>
<h3 id="1-2-MySQL简介"><a href="#1-2-MySQL简介" class="headerlink" title="1.2 MySQL简介"></a>1.2 MySQL简介</h3><ul>
<li><p><strong>什么是SQL</strong>：Structured Query Language的缩写，其是一种专门用来与数据库通信的语言</p>
</li>
<li><p><strong>什么是DBMS</strong>：数据的所有检索，管理和处理实际上都由其完成</p>
</li>
<li><p><strong>什么是MySQL</strong>：是一种DBMS（数据库管理系统），即是一种数据库软件</p>
</li>
</ul>
<p><strong>mysql命令行实用程序</strong>：</p>
<ul>
<li><p>命令输入在 mysql&gt; 之后</p>
</li>
<li><p>命令由 ; 或 \g 结束，仅按 Enter 不执行命令</p>
</li>
<li><p>输入help或\h获得帮助</p>
</li>
<li><p>输入quit或exit退出命令行实用程序</p>
</li>
</ul>
<h3 id="1-3-使用MySQL"><a href="#1-3-使用MySQL" class="headerlink" title="1.3 使用MySQL"></a>1.3 使用MySQL</h3><p><strong>Step 1：</strong>连接–主机名+端口+合法用户名+用户口令    </p>
<p><strong>Step 2：</strong>选择数据库 (<strong>USE databasename</strong>)</p>
<p><strong>Step 3：</strong>了解数据库和表 </p>
<table>
<thead>
<tr>
<th align="center">SHOW关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SHOW DATABASES</td>
<td align="center">返回可用数据库的列表</td>
</tr>
<tr>
<td align="center">SHOW TABLES</td>
<td align="center">返回当前选择数据库内可用表的列表</td>
</tr>
<tr>
<td align="center">SHOW COLUMN FROM / DESCIRBE</td>
<td align="center">用来显示一个表的表列</td>
</tr>
<tr>
<td align="center">SHOW STATUS</td>
<td align="center">显示广泛的服务器状态信息</td>
</tr>
<tr>
<td align="center">SHOW GRANTS</td>
<td align="center">显示授权用户的安全权限</td>
</tr>
<tr>
<td align="center">SHOW CREATE DATABASE / TABLE</td>
<td align="center">显示创建特定数据库或表的MySQL语句</td>
</tr>
<tr>
<td align="center">SHOW ERRORS / WARNINGS</td>
<td align="center">显示服务器错误或警告信息</td>
</tr>
</tbody></table>
<h2 id="2-检索数据"><a href="#2-检索数据" class="headerlink" title="2. 检索数据"></a>2. 检索数据</h2><h3 id="2-1-检索基础"><a href="#2-1-检索基础" class="headerlink" title="2.1 检索基础"></a>2.1 检索基础</h3><table>
<thead>
<tr>
<th align="center">SELECT关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SELECT … FROM …</td>
<td align="center">从以表中检索某表列</td>
</tr>
<tr>
<td align="center">SELECT  a,  b,  c  FROM  A</td>
<td align="center">检索多个列</td>
</tr>
<tr>
<td align="center">SELECT  *  FROM  A</td>
<td align="center">检索所有列</td>
</tr>
<tr>
<td align="center">SELECT  DISTINCT  a  FROM  A</td>
<td align="center">检索不同行</td>
</tr>
<tr>
<td align="center">LIMIT n / LIMIT m, n</td>
<td align="center">限制结果，返回不多于n行 / 返回从行m开始的n行</td>
</tr>
</tbody></table>
<ul>
<li>检索出来的第一行为行0</li>
</ul>
<h3 id="2-2-排序数据"><a href="#2-2-排序数据" class="headerlink" title="2.2 排序数据"></a>2.2 排序数据</h3><p><strong>子句：</strong>SQL语句由子句构成，一个子句通常由一个关键字和所提供的数据组成</p>
<table>
<thead>
<tr>
<th align="center">子句/关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ORDER BY</td>
<td align="center">对返回结果进行排序输出</td>
</tr>
<tr>
<td align="center">DESC</td>
<td align="center">进行降序排序</td>
</tr>
</tbody></table>
<ul>
<li>SELECT  a,  b FROM A  ORDER BY c,  d   —- 根据c进行排序后，再根据d进行排序</li>
<li>DESC关键字只应用到直接位于其前面的列名</li>
</ul>
<h3 id="2-3-过滤数据"><a href="#2-3-过滤数据" class="headerlink" title="2.3 过滤数据"></a>2.3 过滤数据</h3><h4 id="2-3-1-使用WHERE子句"><a href="#2-3-1-使用WHERE子句" class="headerlink" title="2.3.1 使用WHERE子句"></a>2.3.1 使用WHERE子句</h4><table>
<thead>
<tr>
<th align="center">子句/关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">WHERE</td>
<td align="center">指定搜索条件</td>
</tr>
<tr>
<td align="center">BETWEEN  n1  AND  n2</td>
<td align="center">匹配在n1与n2范围内的所有值</td>
</tr>
<tr>
<td align="center">IS NULL</td>
<td align="center">空值检查</td>
</tr>
</tbody></table>
<ul>
<li>WHERE子句的操作符有：=，&lt;&gt; / !=(不等于)，&lt;，&gt;，&lt;=，&gt;=，BETWEEN</li>
<li>MySQL在执行匹配时默认不区分大小写</li>
<li>单引号用于限定字符串</li>
</ul>
<h4 id="2-3-2-数据过滤"><a href="#2-3-2-数据过滤" class="headerlink" title="2.3.2 数据过滤"></a>2.3.2 数据过滤</h4><table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AND</td>
<td align="center">同时满足所有条件</td>
</tr>
<tr>
<td align="center">OR</td>
<td align="center">至少满足一个条件</td>
</tr>
<tr>
<td align="center">IN  (a, b, c)</td>
<td align="center">指定条件范围，与OR功能相当</td>
</tr>
<tr>
<td align="center">NOT</td>
<td align="center">否定后跟条件的关键字</td>
</tr>
</tbody></table>
<ul>
<li>NOT支持对IN，BETWEEN和EXISTS子句取反</li>
</ul>
<h4 id="2-3-3-通配符-正则表达式过滤"><a href="#2-3-3-通配符-正则表达式过滤" class="headerlink" title="2.3.3 通配符/正则表达式过滤"></a>2.3.3 通配符/正则表达式过滤</h4><p><strong>通配符：</strong>来匹配值的一部分的特殊字符</p>
<p><strong>正则表达式：</strong>用来匹配文本的特殊的串</p>
<hr>
<table>
<thead>
<tr>
<th align="center">操作符/通配符</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">LIKE</td>
<td align="center">结合通配符进行数据过滤</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">表示任何字符出现任意次数</td>
</tr>
<tr>
<td align="center">_</td>
<td align="center">只能匹配单个字符，不能多不能少</td>
</tr>
</tbody></table>
<blockquote>
<p>该表只罗列出一部分，更多用法需查询资料</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">正则表达式操作符</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">REGEXP</td>
<td align="center">后面跟着正则表达式</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">表示任意一个字符</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">正则表达式中的OR操作符</td>
</tr>
<tr>
<td align="center">[a|b|c]</td>
<td align="center">定义OR查找什么</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">否定一个字符串</td>
</tr>
<tr>
<td align="center">[a-b]</td>
<td align="center">定义一个a到b的范围</td>
</tr>
</tbody></table>
<ul>
<li>匹配特殊字符串必须用\\为前导</li>
<li>LIKE匹配整个列，如果被匹配文本在列值中出现，LIKE不会找到它，相应行也不会被返回（除非使用通配符）</li>
<li>REGEXP找到相应行后会将其返回</li>
</ul>
<h3 id="2-4-创建计算字段"><a href="#2-4-创建计算字段" class="headerlink" title="2.4 创建计算字段"></a>2.4 创建计算字段</h3><p><strong>字段：</strong>基本上与列的意思相同</p>
<p><strong>拼接：</strong>将值联结到一起构成单个值</p>
<table>
<thead>
<tr>
<th align="center">关键字/函数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Concat()</td>
<td align="center">将字符串进行拼接</td>
</tr>
<tr>
<td align="center">AS</td>
<td align="center">赋予别名</td>
</tr>
<tr>
<td align="center">Trim()</td>
<td align="center">去掉空格</td>
</tr>
</tbody></table>
<p><strong>执行算术计算：</strong>例如SELECT  quantity * item_price  AS  expanded_price</p>
<p>​                            算术操作符：+，-，*，/</p>
<h3 id="2-5-常用函数"><a href="#2-5-常用函数" class="headerlink" title="2.5 常用函数"></a>2.5 常用函数</h3><p><strong>文本处理函数</strong></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Left() / Right()</td>
<td align="center">返回左/右边的字符</td>
</tr>
<tr>
<td align="center">Length()</td>
<td align="center">返回串的长度</td>
</tr>
<tr>
<td align="center">Locate()</td>
<td align="center">找出一个串的子串</td>
</tr>
<tr>
<td align="center">Lower() / Upper()</td>
<td align="center">将串转换为小/大写</td>
</tr>
<tr>
<td align="center">LTrim() / RTrim()</td>
<td align="center">去掉串左/右边的空格</td>
</tr>
<tr>
<td align="center">SubString()</td>
<td align="center">返回子串的字符</td>
</tr>
<tr>
<td align="center">Soundex()</td>
<td align="center">返回串的SOUNDEX值</td>
</tr>
</tbody></table>
<ul>
<li>SOUNDEX是一个将任何文本串转换为描述其语音白哦是的字母数字模式算法</li>
</ul>
<p><strong>数值函数</strong></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Abs()</td>
<td align="center">返回一个数的绝对值</td>
</tr>
<tr>
<td align="center">Cos() / Sin() / Tan()</td>
<td align="center">返回一个数的余弦/正弦/正切</td>
</tr>
<tr>
<td align="center">Sqrt()</td>
<td align="center">返回一个数的平方根</td>
</tr>
<tr>
<td align="center">Pi()</td>
<td align="center">返回圆周率</td>
</tr>
<tr>
<td align="center">Rand()</td>
<td align="center">返回一个随机数</td>
</tr>
<tr>
<td align="center">Exp()</td>
<td align="center">返回一个数的指数值</td>
</tr>
<tr>
<td align="center">Mod()</td>
<td align="center">返回除操作的余数</td>
</tr>
</tbody></table>
<p><strong>日期和时间函数</strong></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AddDate() / AddTime()</td>
<td align="center">增加一个日期/时间</td>
</tr>
<tr>
<td align="center">CurDate() / CurTime()</td>
<td align="center">返回当前日期/时间</td>
</tr>
<tr>
<td align="center">Date()</td>
<td align="center">返回日期时间的日期部分</td>
</tr>
<tr>
<td align="center">DateDiff() / Date_Add() / Date_Format()</td>
<td align="center">两个日期之差/日期运算函数/格式化日期或时间串</td>
</tr>
<tr>
<td align="center">Year() / Month() / DayofWeek() / Day()</td>
<td align="center">返回对应于一个日期的年/月/周/日</td>
</tr>
<tr>
<td align="center">Hour() / Minute() / Second()</td>
<td align="center">返回一个时间的小时/分钟/秒</td>
</tr>
<tr>
<td align="center">Time()</td>
<td align="center">返回一个日期时间的时间部分</td>
</tr>
<tr>
<td align="center">Now()</td>
<td align="center">返回当前日期和时间</td>
</tr>
</tbody></table>
<ul>
<li>日期和时间采用相应数据类型和特殊的格式存储</li>
</ul>
<p><strong>系统函数</strong></p>
<hr>
<h3 id="2-6-汇总数据"><a href="#2-6-汇总数据" class="headerlink" title="2.6 汇总数据"></a>2.6 汇总数据</h3><p><strong>聚集函数：</strong>运行在行组上，计算和返回单个值的函数</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AVG()</td>
<td align="center">返回某列的平均数</td>
</tr>
<tr>
<td align="center">COUNT()</td>
<td align="center">返回某列的行数</td>
</tr>
<tr>
<td align="center">MAX() / MIN()</td>
<td align="center">返回某列的最大值/最小值</td>
</tr>
<tr>
<td align="center">SUM()</td>
<td align="center">返回某列值之和</td>
</tr>
</tbody></table>
<ul>
<li>AVG()函数忽略列值为NULL的行</li>
<li>为获得多个列的平均值，需使用多个AVG()函数</li>
<li>COUNT(*)对表所有行进行统计，不忽略NULL，若COUNT(column)忽略NULL</li>
</ul>
<h3 id="2-7-分组数据"><a href="#2-7-分组数据" class="headerlink" title="2.7 分组数据"></a>2.7 分组数据</h3><table>
<thead>
<tr>
<th>子句/关键字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>GROUP BY</td>
<td>对数据进行分组</td>
</tr>
<tr>
<td>HAVING</td>
<td>提供过滤分组</td>
</tr>
</tbody></table>
<ul>
<li>GROUP BY通常与聚集函数一起使用，在使用时，应该也给出ORDER BY子句</li>
<li>SELECT中的每个列都必须在GROUP BY中给出（除聚集计算）</li>
<li>HAVING支持所有WHERE操作符，WHERE在分组前进行过滤，HAVING在分组后进行过滤</li>
</ul>
<p><strong>SELECT子句使用顺序</strong></p>
<p>SELECT -&gt; FROM -&gt; WHERE -&gt;GROUP BY -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT</p>
<hr>
<h3 id="2-8-使用子查询"><a href="#2-8-使用子查询" class="headerlink" title="2.8 使用子查询"></a>2.8 使用子查询</h3><ul>
<li>SELECT之中，子查询都是由内而外进行的</li>
<li>WHERE子句与子查询应保证有相同数目的列</li>
<li>子查询一般与IN操作符结合使用</li>
</ul>
<hr>
<h3 id="2-9-联结表"><a href="#2-9-联结表" class="headerlink" title="2.9 联结表"></a>2.9 联结表</h3><ul>
<li><p><strong>关系表：</strong>其设计是为了保证把信息分解成多个表，一类数据一类表，各表通过某些常用值（即关系）互相关联</p>
</li>
<li><p><strong>外键：</strong>某表中的一列，其包含另一个表的主键值</p>
</li>
<li><p><strong>创建联结：</strong>FROM venders, products</p>
<p>​                    WHERE  vendors.vend_id = products.vend_id</p>
<p>​                    建立联结相当于每个主键值一行一行与外键值进行比对，保存符合条件的行</p>
<p>​                    若没有WHERE则会返回vendors和products的笛卡尔积</p>
</li>
<li><p><strong>内部联结：</strong>FROM venders <strong>INNER JOIN</strong> products</p>
<p>​                    <strong>ON</strong> vendors.vend_id = products.vend_id</p>
</li>
<li><p><strong>使用表别名：</strong>FROM customers AS c1, customers AS c2</p>
<p>​                        缩短SQL语句  &amp;&amp;  单条SELECT语句中多次使用相同的表</p>
</li>
<li><p><strong>自联结：</strong>相同一张表中，使用不同表别名使用联结</p>
</li>
<li><p><strong>自然联结：</strong>联结返回的数据中排除相同的列出现多次，每个列只返回一次</p>
</li>
<li><p><strong>外部联结：</strong>联结包含了那些在相关表中没有关联的行</p>
<p>​                    FROM  A  <strong>RIGHT/LEFT OUTER JOIN</strong>  B  <strong>ON</strong></p>
<p>​                    LEFT OUTER JOIN 从左边的表中选择所有行</p>
</li>
</ul>
<h3 id="2-10-组合查询"><a href="#2-10-组合查询" class="headerlink" title="2.10 组合查询"></a>2.10 组合查询</h3><p><strong>组合查询：</strong>执行多个SELECT查询语句并返回单个查询结果集  </p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">UNION</td>
<td align="center">组合数条SQL查询</td>
</tr>
<tr>
<td align="center">UNION ALL</td>
<td align="center">不取消重复的行</td>
</tr>
</tbody></table>
<ul>
<li>在各查询语句之间放上UNION</li>
<li>每个查询都必须包含相同的列，表达式，聚合函数</li>
<li>组合查询中只能使用一条ORDER BY子句，且在最后一条SELECT语句之后</li>
</ul>
<h3 id="2-11-全文本搜索"><a href="#2-11-全文本搜索" class="headerlink" title="2.11 全文本搜索"></a>2.11 全文本搜索</h3><p>为了进行全文本搜索，必须索引被搜索的列，索引之后，使用Match()和Against()执行搜索</p>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FULLTEXT(A)</td>
<td align="center">指示对A列进行索引（在创建表时）</td>
</tr>
<tr>
<td align="center">Match()</td>
<td align="center">指定被搜索的列</td>
</tr>
<tr>
<td align="center">Against()</td>
<td align="center">指定要使用的搜索表达式</td>
</tr>
</tbody></table>
<ul>
<li>仅MyISM引擎支持全文本搜索</li>
<li>Match的值必须与FULLTEXT定义中相同</li>
<li>Match和Against建立的为全文本搜索计算出的等级值，根据等级值对查询结果进行排序，词靠前的行的等级值比词靠后的等级值大</li>
<li><strong>使用查询扩展：</strong>放宽返回全文本搜索结果的范围 – Against(‘   ‘  WITH QUERY EXPANSION)</li>
<li><strong>布尔文本搜索：</strong>提供关于内容细节(即使没有FULLTEXT索引也可以使用 IN BOOLEAN MODE</li>
</ul>
<h3 id="2-12-索引"><a href="#2-12-索引" class="headerlink" title="2.12 索引"></a>2.12 索引</h3><p>MySQL数据库几个基本的索引类型：普通索引、唯一索引、主键索引、全文索引</p>
<ol>
<li>索引加快数据库的检索速度</li>
<li>索引降低了插入、删除、修改等维护任务的速度</li>
<li>唯一索引可以确保每一行数据的唯一性</li>
<li>通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能</li>
<li>索引需要占物理和数据空间</li>
</ol>
<hr>
<h2 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3. 插入数据"></a>3. 插入数据</h2><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">INSERT INTO A</td>
<td align="center">A表中插入</td>
</tr>
<tr>
<td align="center">VALUES</td>
<td align="center">插入值</td>
</tr>
</tbody></table>
<ul>
<li>插入完整的行：INSERT INTO A (a, b, c…) VALUES (aa, bb, cc…);</li>
<li>插入多行：INSERT INTO A (a, b, c…) VALUES (aa1, bb1, cc1), VALUES(aa2, bb2, cc2)…;</li>
<li>插入检索数据：INSERT INTO A (a, b, c…) SELECT a, b, c… FROM B;</li>
<li>省略列：INSERT 操作可以省略某些列（满足允许NULL或者给出默认值）</li>
</ul>
<h2 id="4-更新和删除数据"><a href="#4-更新和删除数据" class="headerlink" title="4. 更新和删除数据"></a>4. 更新和删除数据</h2><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">UPDATE A SET a=…, b=…</td>
<td align="center">对表中列数据进行更新</td>
</tr>
<tr>
<td align="center">IGNORE</td>
<td align="center">即使发生错误也继续更新</td>
</tr>
<tr>
<td align="center">DELETE FROM</td>
<td align="center">从表中删除数据(行)</td>
</tr>
<tr>
<td align="center">TRUNCATE TABLE</td>
<td align="center">快速删除一个表中所有行</td>
</tr>
</tbody></table>
<ul>
<li>在使用DELETE和UPDATE时不要省略WHERE子句, 否则可能将整个表进行更改</li>
<li>为删除某个列的值, 可以将其设置为NULL</li>
</ul>
<h2 id="5-创建和操纵表"><a href="#5-创建和操纵表" class="headerlink" title="5. 创建和操纵表"></a>5. 创建和操纵表</h2><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CREATE TABLE(…)</td>
<td align="center">创建表</td>
</tr>
<tr>
<td align="center">PRIMARY KEY()</td>
<td align="center">创建表时的主键指定</td>
</tr>
<tr>
<td align="center">AUTO_INCREMENT</td>
<td align="center">每当增加一行时自动增量</td>
</tr>
<tr>
<td align="center">ENGINE</td>
<td align="center">引擎类型</td>
</tr>
<tr>
<td align="center">DEFAULT</td>
<td align="center">指定默认值</td>
</tr>
<tr>
<td align="center">NOT NULL / NULL</td>
<td align="center">是否可以为NULL值</td>
</tr>
<tr>
<td align="center">ALTER TABLE</td>
<td align="center">更新表</td>
</tr>
<tr>
<td align="center">DROP TABLE</td>
<td align="center">删除表</td>
</tr>
<tr>
<td align="center">DROP COLUMN</td>
<td align="center">删除列</td>
</tr>
<tr>
<td align="center">RENAME TABLE … TO</td>
<td align="center">重命名表</td>
</tr>
</tbody></table>
<ul>
<li><p>允许NULL值的列允许在插入行时不给出该列的值</p>
</li>
<li><p>每个表只允许一个AUTO_INCREMENT列, 且其必须被索引(如成为主键)</p>
</li>
<li><p>ENGINE类型包括InnoDB(支持事务处理,不支持全文本搜索), MEMORY(适合于临时表), MyISM(支持全文本搜索,不支持事务处理)</p>
</li>
<li><p>ALTER TABLE常见用途是定义外键:</p>
<p><strong>ALTER TABLE ** A    **ADD CONSTRAINT</strong> fk_A_B    <strong>FOREIGN KEY</strong> (a) <strong>REFERENCES</strong> B (a);</p>
</li>
<li><p>外键不能跨引擎</p>
</li>
</ul>
<h2 id="6-视图"><a href="#6-视图" class="headerlink" title="6. 视图"></a>6. 视图</h2><blockquote>
<p>视图时一种用于查询存储在别处数据的设施, 自身不存放数据</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CREATE VIEW…AS</td>
<td align="center">创建视图</td>
</tr>
<tr>
<td align="center">DROP VIEW</td>
<td align="center">删除视图</td>
</tr>
<tr>
<td align="center">CREATE OR REPLACE VIEW</td>
<td align="center">更新视图</td>
</tr>
</tbody></table>
<ul>
<li>其存在简化了SQL操作,保护了数据, 用法与表相同</li>
<li>对视图增加或删除行本身是对基表进行操作, 不是所有视图都允许更新</li>
</ul>
<h2 id="7-使用存储过程"><a href="#7-使用存储过程" class="headerlink" title="7. 使用存储过程"></a>7. 使用存储过程</h2><blockquote>
<p>存储过程像是为以后使用而保存的一条或多条MySQL语句的集合</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CALL</td>
<td align="center">执行存储过程</td>
</tr>
<tr>
<td align="center">CREATE PROCEDURE</td>
<td align="center">创建存储过程</td>
</tr>
<tr>
<td align="center">DROP PROCEDURE IF EXISTS</td>
<td align="center">删除存储过程</td>
</tr>
<tr>
<td align="center">DECLARE</td>
<td align="center">定义局部变量</td>
</tr>
<tr>
<td align="center">COMMENT</td>
<td align="center">注解</td>
</tr>
<tr>
<td align="center">OUT</td>
<td align="center">相应参数用来从存储过程中传出一个值</td>
</tr>
<tr>
<td align="center">IN</td>
<td align="center">相应参数用来向存储过程中传入一个值</td>
</tr>
<tr>
<td align="center">INOUT</td>
<td align="center">IN + OUT</td>
</tr>
</tbody></table>
<ul>
<li>存储过程具有简单, 安全, 高效性的特点</li>
<li>如果存储过程接受参数, 其应该在()中列举, 没有参数也应该有括号</li>
<li>用BEGIN和END语句限定存储过程体</li>
<li>存储过程中, 用SELECT用来检索值, 通过INTO关键字将其保存至相应变量中</li>
<li>所有MySQL变量均以@开头</li>
</ul>
<h2 id="8-使用游标"><a href="#8-使用游标" class="headerlink" title="8. 使用游标"></a>8. 使用游标</h2><blockquote>
<p> 游标只能用于存储过程中, 是一个存储在服务器上的数据库查询</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DECLARE  xxx  CURSOR  FOR</td>
<td align="center">创建游标</td>
</tr>
<tr>
<td align="center">OPEN / CLOSE xxx</td>
<td align="center">打开和关闭游标</td>
</tr>
<tr>
<td align="center">FETCH</td>
<td align="center">打开游标后访问游标的一行, 并移动游标至下一行</td>
</tr>
<tr>
<td align="center">REPEAT</td>
<td align="center">循环重复某代码段</td>
</tr>
<tr>
<td align="center">UNTIL … END REPEAT</td>
<td align="center">知道满足条件结束循环</td>
</tr>
<tr>
<td align="center">IF…THEN</td>
<td align="center">满足条件执行</td>
</tr>
<tr>
<td align="center">END IF</td>
<td align="center">结束IF语句块</td>
</tr>
</tbody></table>
<ul>
<li>局部变量需定义在游标或句柄之前</li>
<li>存储过程处理完成后游标就会消失</li>
</ul>
<h2 id="9-使用触发器"><a href="#9-使用触发器" class="headerlink" title="9. 使用触发器"></a>9. 使用触发器</h2><blockquote>
<p>触发器是响应DELETE, INSERT, UPDATE而自动执行的一条MySQL语句</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CREATE TRIGGER</td>
<td align="center">创建触发器</td>
</tr>
<tr>
<td align="center">DROP TRIGGER</td>
<td align="center">删除触发器</td>
</tr>
<tr>
<td align="center">AFTER / BEFORE  ‘operation’  ON</td>
<td align="center">在一个操作后/前触发…</td>
</tr>
<tr>
<td align="center">FOR EACH ROW</td>
<td align="center">对每一行</td>
</tr>
<tr>
<td align="center">NEW / OLD</td>
<td align="center">NEW/ OLD的虚拟表访问更新/旧的表</td>
</tr>
</tbody></table>
<ul>
<li>触发器中不支持CALL语句, 无法调用存储过程</li>
</ul>
<h2 id="10-管理事务处理"><a href="#10-管理事务处理" class="headerlink" title="10. 管理事务处理"></a>10. 管理事务处理</h2><blockquote>
<p>事务的出现，用来维护数据库的完整性,保证成批的MySQL操作要么完全执行,要么完全不执行</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">START TANSACTION</td>
<td align="center">标识事务处理的开始</td>
</tr>
<tr>
<td align="center">ROLLBACK</td>
<td align="center">回退/撤销MySQL语句</td>
</tr>
<tr>
<td align="center">COMMIT</td>
<td align="center">提交事务处理内的操作</td>
</tr>
<tr>
<td align="center">SAVEPOINT</td>
<td align="center">保留点</td>
</tr>
<tr>
<td align="center">RELEASE SAVEPOINT</td>
<td align="center">释放保留点</td>
</tr>
</tbody></table>
<ul>
<li>无法回退CREATE和DROP语句</li>
<li>在事务处理块中, 提交不会隐含进行, 而是使用COMMIT语句, 仅在不出错时提交更改</li>
<li>使用COMMIT或ROLLBACK后事务会自动关闭</li>
<li>可以通过ROLLBACK TO savepoint回退到某个保留点</li>
<li>使用SET autocommit = 0;指示MySQL不自动提交更改,直到其被设置为真为止</li>
</ul>
<h3 id="10-1-ACID原则"><a href="#10-1-ACID原则" class="headerlink" title="10.1 ACID原则"></a><strong>10.1 ACID原则</strong></h3><ul>
<li><p><strong>原子性（A）</strong></p>
<p>一个事务的所有系列操作步骤被看成一个动作，所有的步骤要么全部完成，要么一个也不会完成。如果在事务过程中发生错误，则会回滚到事务开始前的状态，将要被改变的数据库记录不会被改变。</p>
</li>
<li><p><strong>一致性（C）</strong></p>
<p>一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏，即数据库事务不能破坏关系数据的完整性及业务逻辑上的一致性。</p>
</li>
<li><p><strong>隔离性（I）</strong></p>
<p>主要用于实现并发控制，隔离能够确保并发执行的事务按顺序一个接一个地执行。通过隔离，一个未完成事务不会影响另外一个未完成事务。</p>
</li>
<li><p><strong>持久性（D）</strong></p>
<p>一旦一个事务被提交，它应该持久保存，不会因为与其他操作冲突而取消这个事务。</p>
</li>
</ul>
<h3 id="10-2-事务隔离级别"><a href="#10-2-事务隔离级别" class="headerlink" title="10.2 事务隔离级别"></a>10.2 事务隔离级别</h3><p>一个事务隔离解决的实际问题：</p>
<ul>
<li><p><strong>脏读</strong></p>
<p>脏读指的是==读到了其他事务未提交的数据==，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了并一定最终存在的数据，这就是脏读。</p>
</li>
<li><p><strong>不可重复读</strong></p>
<p>不可重复读指的是在同一事务内，==不同的时刻读到的同一批数据可能是不一样的==，可能会受到其他事务的影响，比如其他事务改了这批数据并提交了。通常针对数据<strong>更新（UPDATE）</strong>操作。</p>
</li>
<li><p><strong>幻读</strong></p>
<p>幻读是==针对数据<strong>插入（INSERT）</strong>操作来说的==。假设事务A对某些行的内容作了更改，但是还未提交，此时事务B插入了与事务A更改前的记录相同的记录行，并且在事务A提交之前先提交了，而这时，在事务A中查询，会发现好像刚刚的更改对于某些数据未起作用，但其实是事务B刚插入进来的，让用户感觉很魔幻，感觉出现了幻觉，这就叫幻读。</p>
<p>而事物的隔离级别可以分为：</p>
<img src="C:\Users\13520\AppData\Roaming\Typora\typora-user-images\image-20210310194810837.png" alt="image-20210310194810837" style="zoom:50%;" />

<p>并发编程中，解决脏读可以理解为需要提交的事务操作是原子级别的无法被打断，解决不可重复读和幻读为一个事务的操作为原子级别的无法被打断</p>
</li>
</ul>
<h2 id="11-安全管理"><a href="#11-安全管理" class="headerlink" title="11. 安全管理"></a>11. 安全管理</h2><blockquote>
<p>控制用户对数据库的访问权限,是数据库安全的基础</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CREATE USER … IDENTIFY BY…</td>
<td align="center">创建新用户以及登录口令</td>
</tr>
<tr>
<td align="center">RENAME USER … TO …</td>
<td align="center">重命名用户</td>
</tr>
<tr>
<td align="center">GRANT</td>
<td align="center">为用户设置权限</td>
</tr>
<tr>
<td align="center">REVOKE</td>
<td align="center">撤销特定权限</td>
</tr>
<tr>
<td align="center">SET PASSWORD FOR … = Password()</td>
<td align="center">更改口令</td>
</tr>
</tbody></table>
<ul>
<li>使用SHOW GRANTS FOR A 可以查看A用户的权限</li>
<li>GRANT/REVOKE可以在整个服务器(ALL),数据库(ON database.*),特定的表(ON database.table),列,存储过程上控制访问权限</li>
<li>当某个数据库或表被删除时,相关的访问权限仍然存在</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>技术向</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次搭建博客</title>
    <url>/2020/03/07/My-First-Page/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    em…这是第一次搭建博客，网上到处找教程，东拼西凑。发现有时候跟着步骤走都经常出现Bug，让人伤脑筋，改来改去，磕磕碰碰，耗费了大量时间(不过确实感觉有点上瘾)，有的时候都不记得自己改动过什么就莫名其妙的好了？？？而且经常发现自己的主题目录和教程中对不上，一度怀疑是安了个假的NexT，最后到官方那里查才发现是版本更新，导致好多东西都发生了改变(绝望)，不过还好，花费了大量的时间也算是小有成果，终于拥有了一个属于自己的Blog，也感性一回，随性写一写搭建博客的心路历程（其实是练练markdown语法）</p>
<a id="more"></a>
<!--一点小小的感想-->
<h2 id="1-从代码开始"><a href="#1-从代码开始" class="headerlink" title="1. 从代码开始"></a>1. 从代码开始</h2><p>不管那么多，先码个代码上去试试效果</p>
<figure class="highlight c++"><figcaption><span>放苹果问题</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; m)</span><br><span class="line">    <span class="keyword">return</span> f(m, m);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> f(m, n<span class="number">-1</span>) + f(m-n, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(m, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><del>突然发现代码没有高亮！得想个办法解决！</del><br>哎呀，总算好了解决了！（我也不知道那个是什么玩意，反正改成false就好了）<br>经一位友人的建议，将代码做了些调整，话说在符号周围加空格真的不太习惯</p>
<h2 id="2-一些小改进"><a href="#2-一些小改进" class="headerlink" title="2. 一些小改进"></a>2. 一些小改进</h2><hr>
<h3 id="2-1-关于评论系统"><a href="#2-1-关于评论系统" class="headerlink" title="2.1 关于评论系统"></a>2.1 关于评论系统</h3><div class="note primary">
            <p>把评论系统从来必力改成了valine，显得更加简洁一点，用起来也感觉较为便捷（试了一下，效果还不错）</p>
          </div>

<hr>
<h3 id="2-2-更改了背景板"><a href="#2-2-更改了背景板" class="headerlink" title="2.2 更改了背景板"></a>2.2 更改了背景板</h3><div class="note info">
            <p>将背景和侧栏都改动了一下</p>
          </div>

<hr>
<h3 id="2-3-增加了特色的返回顶部"><a href="#2-3-增加了特色的返回顶部" class="headerlink" title="2.3 增加了特色的返回顶部"></a>2.3 增加了特色的返回顶部</h3><div class="note success">
            <p>把返回顶部换成了小猫上吊（有点花里胡哨，不过效果还行），怀疑是否会对侧栏的使用产生影响，原理嘛好像是把默认的返回标志换了个图标</p>
          </div>

<hr>
<h3 id="2-4-调整了界面排版"><a href="#2-4-调整了界面排版" class="headerlink" title="2.4 调整了界面排版"></a>2.4 调整了界面排版</h3><div class="note warning">
            <p>因为Mist主题的默认排版是左对齐，看的让人不太舒服，所以到网上查了查，将标题，阅读全文还有底部的站点信息调至居中。同时还调整了一下Mist主题的一些配置，增加了一些文章阴影效果，使博客界面再也不是全透明的（全透明会因为背景的色调影响正常的阅读），光是这个就花了我好多时间（虽然我现在也不知道是什么原理，反正在google上复制粘贴就完事了）</p>
          </div>

<hr>
<h3 id="2-5-添加了Aplayer的音乐播放器（代价惨烈）"><a href="#2-5-添加了Aplayer的音乐播放器（代价惨烈）" class="headerlink" title="2.5 添加了Aplayer的音乐播放器（代价惨烈）"></a>2.5 添加了Aplayer的音乐播放器（代价惨烈）</h3><p><strong>更新于3-10</strong><br>记录一下昨天的悲惨经历，我沉痛地失去了我的<span class="label info">鼠标点击特效</span>，半个下午在玩弄如何用<span class="label danger">Aplayer播放器</span>，结果播放器没搞好，不知道调了什么地方，导致点击特效失效了（/拍桌），就算重新调一遍也无济于事。晚上的神经网络导论更是听天书（为什么当时没有果断一点把它退掉），掉进坑里去了。不过还在晚些时候折腾了一番，把音乐播放器的事情解决了（又找到了通过网易云音乐获取外链的方法），但是鼠标特效还是回不来了（黑脸）。</p>
<hr>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>有感而发</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2020/07/20/Markdown/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    Markdown是一种轻量级标记语言。由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，目前许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。本文将讲述Markdown的基本语法， 用于在hexo博客上撰写博文和其他文档提交。</p>
<a id="more"></a>

<h2 id="1-Markdown基本语法"><a href="#1-Markdown基本语法" class="headerlink" title="1. Markdown基本语法"></a>1. Markdown基本语法</h2><h3 id="1-1-字体设置"><a href="#1-1-字体设置" class="headerlink" title="1.1 字体设置"></a>1.1 字体设置</h3><pre><code>*这是斜体*
_这也是斜体_
**这是加粗**
***这是加粗斜体***
~~这是删除线~~</code></pre><p><strong>效果如下：</strong></p>
<p><em>这是斜体</em><br><em>这也是斜体</em><br><strong>这是加粗</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p>
<hr>
<h3 id="1-2-标题设置"><a href="#1-2-标题设置" class="headerlink" title="1.2 标题设置"></a>1.2 标题设置</h3><p><strong>方法一：</strong></p>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
(！！记得加空格！！)</code></pre><p><strong>方法二：</strong></p>
<pre><code>   一级标题
=============
   二级标题
-------------</code></pre><hr>
<h3 id="1-3-链接"><a href="#1-3-链接" class="headerlink" title="1.3 链接"></a>1.3 链接</h3><p>1.插入本地图片链接</p>
<pre><code>格式：![description](/images/title.jpg)</code></pre><p>2.插入网络图片链接</p>
<pre><code>格式：![description](https://../../../---.jpg &quot;title&quot;)</code></pre><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的<img>标签：</p>
<pre><code>&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;, height=&quot;50%&quot;&gt;</code></pre><p>3.插入网站链接</p>
<pre><code>格式：[name](url)</code></pre><p>4.自动连接</p>
<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的</p>
<pre><code>&lt;url&gt; || url</code></pre><hr>
<h3 id="1-4-分割线"><a href="#1-4-分割线" class="headerlink" title="1.4 分割线"></a>1.4 分割线</h3><pre><code>---     //分割线
***</code></pre><hr>
<h3 id="1-5-代码块"><a href="#1-5-代码块" class="headerlink" title="1.5 代码块"></a>1.5 代码块</h3><pre><code>//  ` code `        //单行代码
//
//  ``` [language] [title] [url] [link text]
//
//      code snippet        // 代码块
//
//  ```
- langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字
- title：代码块标题，将会显示在左上角
- url：链接地址，如果没有指定 link text 则会在右上角显link
- link text：链接名称，指定 url 后有效，将会显示在右上角</code></pre><figure class="highlight java"><figcaption><span>HelloWorld</span><a href="https://www.bilibili.com/" target="_blank" rel="noopener">Bilibili</a></figcaption><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-6-引用"><a href="#1-6-引用" class="headerlink" title="1.6 引用"></a>1.6 引用</h3><pre><code>&gt; 引用1
&gt;&gt; 引用2
&gt;&gt;&gt; 引用3

&gt;&gt;&gt; 嵌套引用1
&gt;&gt; 嵌套引用2
&gt; 嵌套引用3</code></pre><blockquote>
<p>引用1</p>
<blockquote>
<p>引用2</p>
<blockquote>
<p>引用3</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>嵌套引用1<br>嵌套引用2<br>嵌套引用3</p>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h3 id="1-7-列表"><a href="#1-7-列表" class="headerlink" title="1.7 列表"></a>1.7 列表</h3><p><strong>无序列表：</strong></p>
<pre><code>- 文字1     + 文字1
- 文字2     + 文字2
- 文字3     + 文字3
（！！注意空格！！）</code></pre><ul>
<li>文字1</li>
<li>文字2</li>
<li>文字3</li>
</ul>
<p><strong>有序列表：</strong></p>
<pre><code>1. 文字1
2. 文字2
3. 文字3
（！空格！）</code></pre><ol>
<li>文字1</li>
<li>文字2</li>
<li>文字3</li>
</ol>
<div class="note danger">
            <p>列表，引用，代码块之间都可以相互嵌套使用的哦！</p>
          </div>

<hr>
<h3 id="1-8-表格"><a href="#1-8-表格" class="headerlink" title="1.8 表格"></a>1.8 表格</h3><pre><code>学号|姓名|分数
:--|:--:|--:
001|Jack|80
002|Mary|90
003|John|100

*表格对齐方式：我们可以指定表格单元格的对齐方式:
冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中</code></pre><table>
<thead>
<tr>
<th align="left">学号</th>
<th align="center">姓名</th>
<th align="right">分数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">001</td>
<td align="center">Jack</td>
<td align="right">80</td>
</tr>
<tr>
<td align="left">002</td>
<td align="center">Mary</td>
<td align="right">90</td>
</tr>
<tr>
<td align="left">003</td>
<td align="center">John</td>
<td align="right">100</td>
</tr>
</tbody></table>
<hr>
<h2 id="2-Hexo中的进阶用法"><a href="#2-Hexo中的进阶用法" class="headerlink" title="2. Hexo中的进阶用法"></a>2. Hexo中的进阶用法</h2><h3 id="2-1-Hexo文章部署"><a href="#2-1-Hexo文章部署" class="headerlink" title="2.1 Hexo文章部署"></a>2.1 Hexo文章部署</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure>

<p>如果未指定文章的布局（layout），则默认使用 <code>post</code> 布局，生成的文档存放于 <code>source\_posts\</code> 目录下</p>
<p>Hexo 默认有三种布局：<code>post</code>、 <code>page</code> 和 <code>draft</code>，用户可以在 <code>scaffolds</code> 目录下新建文档来自定义布局格式，还可以修改站点配置文件中的 <code>default_layout</code>参数来指定生成文档时的默认布局</p>
<p>通过以下命令将草稿发布为正式文章：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ hexo publish <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-2-note标签"><a href="#2-2-note标签" class="headerlink" title="2.2 note标签"></a>2.2 note标签</h3><p>通过 note 标签可以为段落添加背景色，语法如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>[class] %&#125;</span><br><span class="line">文本内容 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定 class</p>
<p>各种 class 种类的效果如下：</p>
<div class="note primary">
            <p><strong>primary</strong> note tag  </p>
          </div>

<div class="note success">
            <p><strong>success</strong> note tag  </p>
          </div>

<div class="note info">
            <p><strong>info</strong> note tag  </p>
          </div>

<div class="note warning">
            <p><strong>warning</strong> note tag  </p>
          </div>

<div class="note danger">
            <p><strong>danger</strong> note tag  </p>
          </div>

<div class="note default">
            <p>undefined class note tag  </p>
          </div>

<hr>
<h3 id="2-3-label标签"><a href="#2-3-label标签" class="headerlink" title="2.3 label标签"></a>2.3 label标签</h3><p>通过 label 标签可以为文字添加背景色，语法如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&#123;% label [<span class="class"><span class="keyword">class</span>]<span class="meta">@text</span>  %&#125;</span></span><br></pre></td></tr></table></figure>

<p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，默认使用 <code>default</code> 作为缺省</p>
<p>使用示例如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">I heard the echo, &#123;% label default@from the valleys and the heart %&#125;</span><br><span class="line">Open to the lonely soul of &#123;% label info@sickle harvesting %&#125;</span><br><span class="line">Repeat outrightly, but also repeat the well-being of</span><br><span class="line">Eventually &#123;% label warning@swaying in the desert oasis %&#125;</span><br><span class="line">&#123;% label success@I believe %&#125; I am</span><br><span class="line">&#123;% label primary@Born as the bright summer flowers %&#125;</span><br><span class="line">Do not withered undefeated fiery demon rule</span><br><span class="line">Heart rate and breathing to bear &#123;% label danger@the load of the cumbersome %&#125;</span><br><span class="line">Bored</span><br></pre></td></tr></table></figure>

<blockquote>
<p>I heard the echo, <span class="label default">from the valleys and the heart</span><br>Open to the lonely soul of <span class="label info">sickle harvesting</span><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <span class="label warning">swaying in the desert oasis</span></p>
<span class="label success">I believe</span> I am
<span class="label primary">Born as the bright summer flowers</span>
<p>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <span class="label danger">the load of the cumbersome</span><br>Bored</p>
</blockquote>
<hr>
<h3 id="2-4-button按钮"><a href="#2-4-button按钮" class="headerlink" title="2.4 button按钮"></a>2.4 button按钮</h3><p>通过 button 标签可以快速添加带有主题样式的按钮，语法如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;% button /<span class="type">path</span>/<span class="keyword">to</span>/url/, <span class="type">text</span>, icon [<span class="keyword">class</span>], title %&#125;</span><br></pre></td></tr></table></figure>

<p>也可简写为：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;% btn /<span class="type">path</span>/<span class="keyword">to</span>/url/, <span class="type">text</span>, icon [<span class="keyword">class</span>], title %&#125;</span><br></pre></td></tr></table></figure>

<p>其中， 图标 ID 来源于 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 。</p>
<p>使用示例如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 标题,, 标题 %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 图标, home %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span></span><br></pre></td></tr></table></figure>

<a class="btn" href="#">
            文本
          </a>
<a class="btn" href="#" title="标题">
            文本 & 标题
          </a>
<a class="btn" href="#">
            <i class="fa fa-home"></i>文本 & 图标
          </a>
<a class="btn" href="#">
            <i class="fa fa-home fa-fw fa-lg"></i>文本 & 大图标 (固定宽度)
          </a>

<h2 id="3-Typora的使用"><a href="#3-Typora的使用" class="headerlink" title="3. Typora的使用"></a>3. Typora的使用</h2><p><strong>Typora</strong>是一款由Abner Lee开发的轻量级<a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a>编辑器</p>
<h3 id="3-1-Typora快捷键"><a href="#3-1-Typora快捷键" class="headerlink" title="3.1 Typora快捷键"></a>3.1 Typora快捷键</h3><p><strong>更多快捷键详见<a href="http://support.typora.io/Shortcut-Keys/#change-shortcut-keys" target="_blank" rel="noopener">Typora Shortcut Keys</a></strong></p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/image-20201201094758770.png" alt="image-20201201094758770" style="zoom:50%;" />

<center>文章段落快捷键</center>

<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/image-20201201095014421.png" alt="image-20201201095014421" style="zoom:50%;" />

<center>文章格式渲染快捷键</center>

<h3 id="3-2-扩展语法"><a href="#3-2-扩展语法" class="headerlink" title="3.2 扩展语法"></a>3.2 扩展语法</h3><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/image-20201201155016918.png" alt="image-20201201155016918" style="zoom: 50%;" />

<p>可以看到通过扩展语法符号达到很多有用的效果</p>
<p>效果如下: $\LaTeX$     H<del>2</del>O    X^2^    ==key==</p>
<p>同时也可以通过<code>:</code>符号来引入emoji表情，效果如下:smile:, :alarm_clock:, :angel:</p>
<h3 id="3-3-主题设置"><a href="#3-3-主题设置" class="headerlink" title="3.3 主题设置"></a>3.3 主题设置</h3><p>Typora由不同的主题，通过CSS文件对其进行渲染，想要获取更多的主题可以前往<a href="http://theme.typora.io/" target="_blank" rel="noopener">Typora主题</a>中下载，并放入主题文件夹下，重启后便可以对其进行选择</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/image-20201201160720865.png" alt="image-20201201160720865" style="zoom:50%;" />

<h3 id="3-4-PicGo-Github搭建图床"><a href="#3-4-PicGo-Github搭建图床" class="headerlink" title="3.4 PicGo+Github搭建图床"></a>3.4 PicGo+Github搭建图床</h3><ol>
<li><p><strong>创建Github仓库</strong></p>
<p>点击 Github 主页右上角的 <code>+</code> 创建 <code>New repository</code>，填写仓库信息，设置为<code>Public</code></p>
</li>
<li><p><strong>创建 token 并复制保存</strong></p>
<p>进入<code>Settings-&gt;Developper settings-&gt;Personal access tokens-&gt;Generate new token</code>，填写description，勾选复选框repo后点击底部Generate token生成，然后复制生成一串字符 token，这个 token 只出现一次，所以要保存一下。</p>
</li>
<li><p><strong>PicGo配置</strong></p>
<p>在Github上下载<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>，找到Github图床进行配置</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/image-20201201162538642.png" alt="image-20201201162538642" style="zoom:50%;" />

<ul>
<li>仓库名 即你的仓库名</li>
<li>分支名 默认 <code>master</code></li>
<li>Token 就是刚刚复制的那一串字符</li>
<li>存储路径 这个可以填也可以不填，填了的话图片就上传到 Github仓库 中 <code>/img</code> 这个文件夹</li>
<li>域名 <code>https://cdn.jsdelivr.net/gh/${username}/${repository name}@${branch name}</code></li>
</ul>
</li>
<li><p>Typora配置</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/image-20201201162625412.png" alt="image-20201201162625412" style="zoom:50%;" />

<p>在<code>偏好设置-&gt;图像-&gt;上传服务设定</code>中确定上传服务，PicGo路径，之后通过验证确保上传连接有效，同时也可以设置插入图片时的操作，使得插入图片自动上传到Github上去</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>技术向</tag>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存布局</title>
    <url>/2020/09/16/Java02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>以下是结合参考资料并基于个人理解对该题涉及Java内存的一些基本概念进行的简要描述</center>

<a id="more"></a>

<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h3 id="1-1-虚拟机运行时的数据区"><a href="#1-1-虚拟机运行时的数据区" class="headerlink" title="1.1 虚拟机运行时的数据区"></a>1.1 虚拟机运行时的数据区</h3><p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180349.png" alt=""></p>
<ul>
<li><p>程序计数器：用于记录下一条指令的选取。</p>
</li>
<li><p>虚拟机栈：Java方法执行的内存模型，用于存放局部变量表（主要存放了编译器可知的各种数据类型，对象引用），操作数栈等。</p>
</li>
<li><p>本地方法栈：作用与虚拟机栈相似，用来存放本地方法的各种属性。为虚拟机提供调用其它语言方法的服务。</p>
</li>
<li><p>堆：在虚拟机启用时创建，用于存放对象实例（几乎所有对象实例以及数组均在这里分配内存），是垃圾收集器（GC）管理的主要区域。</p>
</li>
<li><p>方法区：用于存储已被虚拟机加载的类信息，常量，静态变量，编译后的代码等数据。</p>
</li>
<li><p>运行时常量池：用于存放编译期间生成的各种字面量和符号引用</p>
</li>
</ul>
<hr>
<h3 id="1-2-虚拟机中的对象："><a href="#1-2-虚拟机中的对象：" class="headerlink" title="1.2 虚拟机中的对象："></a>1.2 虚拟机中的对象：</h3><h4 id="I-对象的创建"><a href="#I-对象的创建" class="headerlink" title="I.对象的创建:"></a>I.对象的创建:</h4><p>​    Java对象创建分为5个步骤，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180354.png" alt=""></p>
<ul>
<li><p>类加载检查：虚拟机遇到new指令时搜索是否在常量池中能定位到这个类的符号引用，并检查是否已经被加载、解析和初始化过。若没有则执行相应类加载过程。</p>
</li>
<li><p>分配内存：通过上一步后，在堆中为新对象分配内存空间。分配方式分为“指针碰撞”和”空闲列表“</p>
</li>
<li><p>初始化零值：将分配的空间都初始化为零值</p>
</li>
<li><p>设置对象头：存放对象的一些信息至对象头中</p>
</li>
<li><p>执行初始化方法：根据实际代码内容对对象进行初始化</p>
</li>
</ul>
<h4 id="II-对象内存布局"><a href="#II-对象内存布局" class="headerlink" title="II.对象内存布局"></a>II.对象内存布局</h4><p>​    对象在内存中的布局可分为：对象头、实例数据、对齐填充：</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180422.png" style="zoom:50%;" />

<ul>
<li>对象头：一部分用于存储对象运行时的一些数据，一部分是一个指针，通过该指针指向该对象所对应的对象的类</li>
<li>实例数据：包含对象存储的有效信息</li>
<li>对齐填充：由于内存起始地址的特殊要求，需要对象头部分正好是8的倍数，当数据部分不够时，用对齐填充补全</li>
</ul>
<h4 id="III-对象访问定位"><a href="#III-对象访问定位" class="headerlink" title="III.对象访问定位"></a>III.对象访问定位</h4><p>​    对象的访问主要有<strong>使用句柄</strong>和<strong>直接指针</strong>两种：</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180414.png" style="zoom: 50%;" />

<ul>
<li>使用句柄：相当于对于一个实例对象，在堆内的一个固定区域（句柄池）存放一个指向对象实例数据的指针和一个指向该对象类型数据的指针，引用通过两次指针定位进行访问对象</li>
<li>直接指针：引用直接存放对象的地址，可以直接访问</li>
</ul>
<hr>
<h2 id="2-测试代码解析"><a href="#2-测试代码解析" class="headerlink" title="2. 测试代码解析"></a>2. 测试代码解析</h2><hr>
<h3 id="2-1-Object类"><a href="#2-1-Object类" class="headerlink" title="2.1 Object类"></a>2.1 Object类</h3><p><strong>Code 1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">Object o3 = o1;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Object Test 0的结果是："</span>+o1);	<span class="comment">//java.lang.Object@7291c18f</span></span><br><span class="line">System.out.println(<span class="string">"Object Test 1的结果是："</span>+(o1==o2));			<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"Object Test 2的结果是："</span>+(o1.equals(o2)));	<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"Object Test 3的结果是："</span>+(o1.equals(o3)));	<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Object Test 4的结果是："</span>+(o1==o3));			<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Object Test 5的结果是："</span>+(o2.equals(o3)));	<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"Object Test 6的结果是："</span>+(o2==o3));			<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>o1和o2都通过new建立两个不同的新的对象，新的对象生成在堆中，而o1和o2作为局部变量存放在栈中，且其作为对象引用，分别存放着二者新创建对象的地址。将o1赋值给o3，使得o3获得与o1相同的地址，指向同一个对象。</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180437.png" style="zoom:50%;" />

<p><strong>由此：</strong></p>
<p><strong>Test 0：</strong>输出的o1其实是新对象在堆中的一个地址</p>
<p><strong>Test 1：</strong>由于这是两个不同对象的创建，因此对象地址也不同，“==”比较的是两者的地址是否相等，所以o1和o2不相同</p>
<p><strong>Test 2：</strong>在Object类中中“equals（）”方法用于判断两个引用变量内容是否相等，由上可知，o1和o2均指向不同的地址，因此不相同</p>
<p><strong>Test 3：</strong>o1和o3指向对象相同，因此二者相同</p>
<p><strong>Test 4：</strong>o1和o3拥有相同的对象地址，所以判等相同</p>
<p><strong>Test 5：</strong>o2和o3没有指向相同的对象，因此二者不同</p>
<p><strong>Test 6：</strong>o2和o3拥有不同对象的地址，因此二者不相同</p>
<hr>
<h3 id="2-2-String类"><a href="#2-2-String类" class="headerlink" title="2.2 String类"></a>2.2 String类</h3><p><strong>Code 2：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line">String s3 = <span class="string">"ab"</span>+<span class="string">"c"</span>;</span><br><span class="line">String s4 = <span class="string">"a"</span>+<span class="string">"b"</span>+<span class="string">"c"</span>;</span><br><span class="line">String s5 = <span class="string">"c"</span>;</span><br><span class="line">String s6 = <span class="string">"ab"</span> + s5;</span><br><span class="line">String s7 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"String Test 1的结果是："</span>+(s1==s2));				<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"String Test 2的结果是："</span>+(s1==s3));				<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"String Test 3的结果是："</span>+(s1==s4));				<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"String Test 4的结果是："</span>+(s1==s6));				<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"String Test 5的结果是："</span>+(s1.equals(s6)));		<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"String Test 6的结果是："</span>+(s1==s7));				<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"String Test 7的结果是："</span>+(s1.equals(s7)));		<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>对于String类型的对象，直接使用双引号声明出来的对象会直接存储在常量池中。而只要是使用new方法，便需要在堆中创建新的对象，在使用字符串引用变量进行字符串拼接时会重新在堆中创建对象。</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180443.png" style="zoom:50%;" />

<p><strong>由此：</strong></p>
<p><strong>Test 1：</strong>s1和s2指向的都是常量池中同一个对象”abc“</p>
<p><strong>Test 2：</strong>s1和由字符串常量拼接而成的s3都是指向常量池中同一个对象</p>
<p><strong>Test 3：</strong>s1和由字符串常量拼接而成的s4也都是指向常量池中同一个对象</p>
<p><strong>Test 4：</strong>s1指向常量池的一个对象，而s6指向的是在堆中创建的新对象，其地址不同</p>
<p><strong>Test 5：</strong>s1指向常量池的一个对象，而s6指向的是在堆中创建的新对象，由于String类的equals覆写后比较的是字符串的内容，二者字符串内容相同</p>
<p><strong>Test 6：</strong>s1指向常量池的一个对象，而s7指向的是在堆中创建的新对象，其地址不同</p>
<p><strong>Test 7：</strong>s1指向常量池的一个对象，而s7指向的是在堆中创建的新对象，由于String类的equals覆写后比较的是字符串的内容，二者字符串内容相同</p>
<hr>
<h3 id="2-3-包装类"><a href="#2-3-包装类" class="headerlink" title="2.3 包装类"></a>2.3 包装类</h3><p><strong>Code 3：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">Integer i2 = <span class="number">10</span>;</span><br><span class="line">Integer i3 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">5</span>);</span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">5</span>);</span><br><span class="line">Integer i6 = i4 + i5;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Integer Test 1 的结果是："</span>+(i1 == i2));			<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 2 的结果是："</span>+(i1 == i3));			<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 3 的结果是："</span>+(i2 == i3));			<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 4 的结果是："</span>+(i1 == (i4+i5)));		<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 5 的结果是："</span>+(i2 == (i4+i5)));		<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 6 的结果是："</span>+(i3 == (i4+i5)));		<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 7 的结果是："</span>+(i1 == i6));			<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 8 的结果是："</span>+(i2 == i6));			<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 9 的结果是："</span>+((i3 == i6)));		<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 10的结果是："</span>+((i3.equals(i6))));	<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer a = <span class="number">127</span>;</span><br><span class="line">Integer b = <span class="number">127</span>;</span><br><span class="line">Integer c = <span class="number">128</span>;</span><br><span class="line">Integer d = <span class="number">128</span>;</span><br><span class="line">System.out.println(<span class="string">"Integer Test 11的结果是："</span>+(a==b));				<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"Integer Test 12的结果是："</span>+(c==d));				<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>Java基本类型的包装类大部分都实现了常量池技术（Byte, Short, Interger, Long…），其默认创建了数值在[-128, 127]（即一个字节内）之间的相应类型的缓存数据，超出该范围仍然需要创建新的对象。在基本数据类型与包装类进行判等比较，+，-，*，/等运算时，包装类会进行自动拆箱为基本类型数值，其值为包装类的value。而赋值时，拆箱与装箱取决于被赋值数。</p>
<p><strong>由此：</strong></p>
<p><strong>Test 1：</strong>由于自动拆箱，i2的Integer包装类变成数值为10的int类型，其数值与i1相等</p>
<p><strong>Test 2：</strong>同理，由于自动拆箱，两者数值相同</p>
<p><strong>Test 3：</strong>i2由于数值在规定区间内，对象直接处于常量池中，而i3在堆中创建新对象，二者不指向同一对象</p>
<p><strong>Test 4：</strong>i4，i5经过自动拆箱变为数值为5的int类型，i4和i5的数值进行相加，与i1的数值相同</p>
<p><strong>Test 5：</strong>i4，i5经过自动拆箱变为int类型，i4和i5的数值进行相加，i2自动拆箱变为数值为10的int类型，两边相同</p>
<p><strong>Test 6：</strong>同上，i3也经过自动拆箱变为数值为10的int类型，两边值相同</p>
<blockquote>
<p>i4和i5经过自动拆箱变为数值为5的int类型，相加后经过自动装箱包装为value为10的Integer对象i6，位于常量池中。</p>
</blockquote>
<p><strong>Test 7：</strong>i6 由于自动拆箱，变成数值为10的int类型，与i1相同</p>
<p><strong>Test 8：</strong>i2和i6所指为同一对象，均在常量池中</p>
<p><strong>Test 9：</strong>i3在堆中，i6在常量池中，所处地址不同</p>
<p><strong>Test 10：</strong>equals比较Integer类的数值，i3的数值10与i6数值相同</p>
<p><strong>Test 11：</strong>数值在[-128, 127]的包装对象，对象会放在常量池中，a、b指向同一个对象</p>
<p><strong>Test 12：</strong>数值大于127，c、d为分别在堆中新建的新对象，二者地址不同</p>
<hr>
<h2 id="3-拓展"><a href="#3-拓展" class="headerlink" title="3. 拓展"></a>3. 拓展</h2><h3 id="3-1-栈溢出代码"><a href="#3-1-栈溢出代码" class="headerlink" title="3.1 栈溢出代码"></a>3.1 栈溢出代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackoverflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    stackoverflow();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>栈中存放一些局部变量，返回地址等，则在函数中设置一个局部变量，利用无限递归使得栈溢出，运行结果图如下</p>
<img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180454.png" style="zoom:50%;" />

<h3 id="3-2-堆溢出代码"><a href="#3-2-堆溢出代码" class="headerlink" title="3.2 堆溢出代码"></a>3.2 堆溢出代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outOfMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>*<span class="number">1024</span>*<span class="number">1024</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过不断地创建新的对象来填充堆区域，直至没有可分配的堆区域，运行结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180503.png" alt=""></p>
<h3 id="3-3-堆内常量池溢出"><a href="#3-3-堆内常量池溢出" class="headerlink" title="3.3 堆内常量池溢出"></a>3.3 堆内常量池溢出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">poolOOM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        list.add(String.valueOf(i++).intern());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过不断创建String类对象，填充堆内的常量池，运行结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Lapati5/PictureBed@main/img/20201018180509.png" alt=""></p>
<p>(一开始一直没有堆溢出，所以更改了一下运行时堆的内存，不然感觉跑不完😬)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术向</tag>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
